{
  "glbFileName": "Overview.glb",
  "name": "Overview",
  "tests": [
    {
      "name": "flow/branch",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Branch Condition True",
          "nodeId": 1
        },
        {
          "name": "Branch Condition False",
          "nodeId": 18
        }
      ],
      "subTests": [
        {
          "name": "True-Condition true-flow",
          "resultVarName": "TestResult_flow/branch_True-Condition true-flow",
          "resultVarId": 0,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 0,
          "successResultVarName": "TestResult_HasPassed_flow/branch_True-Condition true-flow"
        },
        {
          "name": "True-Condition false-flow",
          "resultVarName": "TestResult_flow/branch_True-Condition false-flow",
          "resultVarId": 1,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 1,
          "successResultVarName": "TestResult_HasPassed_flow/branch_True-Condition false-flow"
        },
        {
          "name": "False-Condition true-flow",
          "resultVarName": "TestResult_flow/branch_False-Condition true-flow",
          "resultVarId": 2,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 2,
          "successResultVarName": "TestResult_HasPassed_flow/branch_False-Condition true-flow"
        },
        {
          "name": "False-Condition false-flow",
          "resultVarName": "TestResult_flow/branch_False-Condition false-flow",
          "resultVarId": 3,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 3,
          "successResultVarName": "TestResult_HasPassed_flow/branch_False-Condition false-flow"
        }
      ]
    },
    {
      "name": "flow/doN",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/doN",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Do N - Iterations",
          "nodeId": 35
        },
        {
          "name": "Do N - Reset",
          "nodeId": 77
        },
        {
          "name": "Do N - Max Iteration",
          "nodeId": 95
        }
      ],
      "subTests": [
        {
          "name": "[out] flow",
          "resultVarName": "TestResult_flow/doN_[out] flow",
          "resultVarId": 5,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 5,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[out] flow"
        },
        {
          "name": "[out] iteration (5)",
          "resultVarName": "TestResult_flow/doN_[out] iteration (5)",
          "resultVarId": 7,
          "resultVarType": "int",
          "expectedResultValue": [
            5
          ],
          "successResultVarId": 6,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[out] iteration (5)"
        },
        {
          "name": "[currentCount]",
          "resultVarName": "TestResult_flow/doN_[currentCount]",
          "resultVarId": 9,
          "resultVarType": "int",
          "expectedResultValue": [
            5
          ],
          "successResultVarId": 8,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[currentCount]"
        },
        {
          "name": "[reset] flow (N = 2, out/out/out/reset/out/out)",
          "resultVarName": "TestResult_flow/doN_[reset] flow (N = 2, out/out/out/reset/out/out)",
          "resultVarId": 12,
          "resultVarType": "int",
          "expectedResultValue": [
            4
          ],
          "successResultVarId": 11,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[reset] flow (N = 2, out/out/out/reset/out/out)"
        },
        {
          "name": "Max Iteration flow",
          "resultVarName": "TestResult_flow/doN_Max Iteration flow",
          "resultVarId": 15,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 14,
          "successResultVarName": "TestResult_HasPassed_flow/doN_Max Iteration flow"
        }
      ]
    },
    {
      "name": "flow/for",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/for",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Loop Entry",
          "nodeId": 113
        }
      ],
      "subTests": [
        {
          "name": "[body] flow",
          "resultVarName": "TestResult_flow/for_[body] flow",
          "resultVarId": 18,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 18,
          "successResultVarName": "TestResult_HasPassed_flow/for_[body] flow"
        },
        {
          "name": "Loop range (0..10)",
          "resultVarName": "TestResult_flow/for_Loop range (0..10)",
          "resultVarId": 21,
          "resultVarType": "int",
          "expectedResultValue": [
            10
          ],
          "successResultVarId": 20,
          "successResultVarName": "TestResult_HasPassed_flow/for_Loop range (0..10)"
        },
        {
          "name": "[completed] flow",
          "resultVarName": "TestResult_flow/for_[completed] flow",
          "resultVarId": 22,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 22,
          "successResultVarName": "TestResult_HasPassed_flow/for_[completed] flow"
        },
        {
          "name": "Initial index",
          "resultVarName": "TestResult_flow/for_Initial index",
          "resultVarId": 17,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 16,
          "successResultVarName": "TestResult_HasPassed_flow/for_Initial index"
        },
        {
          "name": "[index] when completed",
          "resultVarName": "TestResult_flow/for_[index] when completed",
          "resultVarId": 24,
          "resultVarType": "int",
          "expectedResultValue": [
            10
          ],
          "successResultVarId": 23,
          "successResultVarName": "TestResult_HasPassed_flow/for_[index] when completed"
        }
      ]
    },
    {
      "name": "flow/multiGate",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/multiGate",
        "flow/sequence",
        "math/add",
        "math/and",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Order (008, 004, 001) > (001, 004, 008)",
          "nodeId": 168
        },
        {
          "name": "Random (Check if all out flows are triggered once)",
          "nodeId": 196
        },
        {
          "name": "Loop",
          "nodeId": 224
        },
        {
          "name": "Loop",
          "nodeId": 259
        }
      ],
      "subTests": [
        {
          "name": "Loop",
          "resultVarName": "TestResult_flow/multiGate_Loop",
          "resultVarId": 36,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 36,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Loop"
        },
        {
          "name": "Random (Check if all out flows are triggered once)",
          "resultVarName": "TestResult_flow/multiGate_Random (Check if all out flows are triggered once)",
          "resultVarId": 31,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 31,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Random (Check if all out flows are triggered once)"
        },
        {
          "name": "Order (008, 004, 001) > (001, 004, 008)",
          "resultVarName": "TestResult_flow/multiGate_Order (008, 004, 001) > (001, 004, 008)",
          "resultVarId": 26,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 26,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Order (008, 004, 001) > (001, 004, 008)"
        },
        {
          "name": "Reset Loop",
          "resultVarName": "TestResult_flow/multiGate_Reset Loop",
          "resultVarId": 41,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 41,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Reset Loop"
        }
      ]
    },
    {
      "name": "flow/sequence",
      "description": "Tests the sequence order of the flow outputs.",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Sequence Order (0,9,10) > (0,10,9)",
          "nodeId": 291
        },
        {
          "name": "Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "nodeId": 318
        },
        {
          "name": "Sequence Order (b,B,a,A) > (A,B,a,b)",
          "nodeId": 345
        }
      ],
      "subTests": [
        {
          "name": "Sequence Order (0,9,10) > (0,10,9)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (0,9,10) > (0,10,9)",
          "resultVarId": 44,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 44,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (0,9,10) > (0,10,9)"
        },
        {
          "name": "Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "resultVarId": 46,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 46,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (ccc,aaa,b) > (aaa,b,ccc)"
        },
        {
          "name": "Sequence Order (b,B,a,A) > (A,B,a,b)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (b,B,a,A) > (A,B,a,b)",
          "resultVarId": 48,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 48,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (b,B,a,A) > (A,B,a,b)"
        }
      ]
    },
    {
      "name": "flow/setDelay and cancelDelay",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "event/onTick",
        "flow/branch",
        "flow/cancelDelay",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/add",
        "math/eq",
        "math/isnan",
        "math/lt",
        "math/select",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Delay (delayed execution)",
          "nodeId": 376,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "setDelay [cancel] (delayed execution)",
          "nodeId": 419,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Cancel Delay (delayed execution)",
          "nodeId": 431,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Error (delayed execution)",
          "nodeId": 453,
          "delayedExecutionTime": 2.0
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [out]",
          "resultVarId": 54,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [out]"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done]",
          "resultVarId": 50,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 50,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done]"
        },
        {
          "name": "Flow [done] \nin correct delay",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done] \nin correct delay",
          "resultVarId": 52,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 51,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done] \nin correct delay"
        },
        {
          "name": "Flow [err]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [err]",
          "resultVarId": 58,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 58,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [err]"
        },
        {
          "name": "setDelay [cancel]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_setDelay [cancel]",
          "resultVarId": 55,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 55,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_setDelay [cancel]"
        },
        {
          "name": "cancelDelay triggered",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay triggered",
          "resultVarId": 56,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 56,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay triggered"
        },
        {
          "name": "cancelDelay \nFlow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]",
          "resultVarId": 57,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 57,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]"
        }
      ]
    },
    {
      "name": "flow/switch",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/switch",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Switch selection flow",
          "nodeId": 463
        },
        {
          "name": "Switch default flow",
          "nodeId": 473
        },
        {
          "name": "Switch empty-cases default flow",
          "nodeId": 484
        },
        {
          "name": "Switch negate cases flow",
          "nodeId": 495
        }
      ],
      "subTests": [
        {
          "name": "Selection flow",
          "resultVarName": "TestResult_flow/switch_Selection flow",
          "resultVarId": 59,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 59,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Selection flow"
        },
        {
          "name": "Default flow",
          "resultVarName": "TestResult_flow/switch_Default flow",
          "resultVarId": 60,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 60,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Default flow"
        },
        {
          "name": "Empty cases default flow",
          "resultVarName": "TestResult_flow/switch_Empty cases default flow",
          "resultVarId": 61,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 61,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Empty cases default flow"
        },
        {
          "name": "Negate cases flow",
          "resultVarName": "TestResult_flow/switch_Negate cases flow",
          "resultVarId": 62,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 62,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Negate cases flow"
        }
      ]
    },
    {
      "name": "flow/throttle",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "flow/throttle",
        "math/abs",
        "math/add",
        "math/eq",
        "math/lt",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "[out] flow",
          "nodeId": 505
        },
        {
          "name": "Flow Out After Delay (delayed execution)",
          "nodeId": 531,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "[err] Flow on -1 Duration",
          "nodeId": 556
        },
        {
          "name": "[reset]",
          "nodeId": 572
        }
      ],
      "subTests": [
        {
          "name": "[out] flow",
          "resultVarName": "TestResult_flow/throttle_[out] flow",
          "resultVarId": 66,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[out] flow"
        },
        {
          "name": "[lastRemainingTime]",
          "resultVarName": "TestResult_flow/throttle_[lastRemainingTime]",
          "resultVarId": 64,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 63,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[lastRemainingTime]"
        },
        {
          "name": "Flow Out After Delay",
          "resultVarName": "TestResult_flow/throttle_Flow Out After Delay",
          "resultVarId": 69,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_Flow Out After Delay"
        },
        {
          "name": "SubTest: setDelay",
          "resultVarName": "TestResult_flow/throttle_SubTest: setDelay",
          "resultVarId": 67,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 67,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_SubTest: setDelay"
        },
        {
          "name": "[err] Flow on -1 Duration",
          "resultVarName": "TestResult_flow/throttle_[err] Flow on -1 Duration",
          "resultVarId": 70,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 70,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[err] Flow on -1 Duration"
        },
        {
          "name": "Ignore [out] when error",
          "resultVarName": "TestResult_flow/throttle_Ignore [out] when error",
          "resultVarId": 71,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 71,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_Ignore [out] when error"
        },
        {
          "name": "[reset]",
          "resultVarName": "TestResult_flow/throttle_[reset]",
          "resultVarId": 73,
          "resultVarType": "int",
          "expectedResultValue": [
            3
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[reset]"
        }
      ]
    },
    {
      "name": "flow/waitAll",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/waitAll",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Wait All - Completed",
          "nodeId": 585
        },
        {
          "name": "Wait All - Remaining",
          "nodeId": 605
        },
        {
          "name": "Wait All - Reset",
          "nodeId": 620
        },
        {
          "name": "Wait All - Reset Completed",
          "nodeId": 636
        }
      ],
      "subTests": [
        {
          "name": "[completed]",
          "resultVarName": "TestResult_flow/waitAll_[completed]",
          "resultVarId": 76,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 76,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[completed]"
        },
        {
          "name": "[remainingInputs] on completed",
          "resultVarName": "TestResult_flow/waitAll_[remainingInputs] on completed",
          "resultVarId": 75,
          "resultVarType": "int",
          "expectedResultValue": [
            0
          ],
          "successResultVarId": 74,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[remainingInputs] on completed"
        },
        {
          "name": "[remainingInputs]",
          "resultVarName": "TestResult_flow/waitAll_[remainingInputs]",
          "resultVarId": 78,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 77,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[remainingInputs]"
        },
        {
          "name": "[reset]",
          "resultVarName": "TestResult_flow/waitAll_[reset]",
          "resultVarId": 80,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 79,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[reset]"
        },
        {
          "name": "[reset] [completed]",
          "resultVarName": "TestResult_flow/waitAll_[reset] [completed]",
          "resultVarId": 82,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[reset] [completed]"
        }
      ]
    },
    {
      "name": "flow/while",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/while",
        "math/add",
        "math/eq",
        "math/lt",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "While Loop flowIn",
          "nodeId": 651
        },
        {
          "name": "While Loop flowIn (false Condition)",
          "nodeId": 683
        }
      ],
      "subTests": [
        {
          "name": "[body] flow",
          "resultVarName": "TestResult_flow/while_[body] flow",
          "resultVarId": 84,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 84,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] flow"
        },
        {
          "name": "[completed] flow",
          "resultVarName": "TestResult_flow/while_[completed] flow",
          "resultVarId": 87,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 87,
          "successResultVarName": "TestResult_HasPassed_flow/while_[completed] flow"
        },
        {
          "name": "[body] iteration (2)",
          "resultVarName": "TestResult_flow/while_[body] iteration (2)",
          "resultVarId": 86,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 85,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] iteration (2)"
        },
        {
          "name": "[body] flow when false",
          "resultVarName": "TestResult_flow/while_[body] flow when false",
          "resultVarId": 88,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 88,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] flow when false"
        },
        {
          "name": "[completed] flow when false",
          "resultVarName": "TestResult_flow/while_[completed] flow when false",
          "resultVarId": 89,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 89,
          "successResultVarName": "TestResult_HasPassed_flow/while_[completed] flow when false"
        }
      ]
    },
    {
      "name": "prerequisites/Tests required operations",
      "description": "Testing required operations for proper test execution. This tests should be passed before testing all other tests.",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/add",
        "math/and",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Entry",
          "nodeId": 699
        },
        {
          "name": "Delayed Check (delayed execution)",
          "nodeId": 763,
          "delayedExecutionTime": 1.0
        }
      ],
      "subTests": [
        {
          "name": "Flow Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Flow Checks",
          "resultVarId": 90,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 90,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Flow Checks"
        },
        {
          "name": "Value Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Value Checks",
          "resultVarId": 92,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 91,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Value Checks"
        },
        {
          "name": "Value Proximity Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Value Proximity Checks",
          "resultVarId": 94,
          "resultVarType": "float",
          "expectedResultValue": [
            33.2114563
          ],
          "successResultVarId": 93,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Value Proximity Checks"
        },
        {
          "name": "Counter Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Counter Checks",
          "resultVarId": 97,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 96,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Counter Checks"
        },
        {
          "name": "Multi Flow Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Multi Flow Checks",
          "resultVarId": 100,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 100,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Multi Flow Checks"
        },
        {
          "name": "Delayed Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Delayed Checks",
          "resultVarId": 101,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 101,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Delayed Checks"
        }
      ]
    },
    {
      "name": "variable/interpolate",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/eq",
        "math/lt",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/interpolate",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Interpolate (delayed execution)",
          "nodeId": 774,
          "delayedExecutionTime": 4.5
        },
        {
          "name": "[Err] flow (duration -1f",
          "nodeId": 820
        },
        {
          "name": "[Err] flow (duration infinite",
          "nodeId": 830
        },
        {
          "name": "[Err] flow (p1 NaN)",
          "nodeId": 840
        },
        {
          "name": "[Err] flow (p2 NaN)",
          "nodeId": 851
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_variable/interpolate_Flow [out]",
          "resultVarId": 103,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 103,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Flow [out]"
        },
        {
          "name": "Value at 50%",
          "resultVarName": "TestResult_variable/interpolate_Value at 50%",
          "resultVarId": 106,
          "resultVarType": "float",
          "expectedResultValue": [
            8.75
          ],
          "successResultVarId": 105,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Value at 50%"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_variable/interpolate_Flow [done]",
          "resultVarId": 104,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 104,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Flow [done]"
        },
        {
          "name": "Value at 100%",
          "resultVarName": "TestResult_variable/interpolate_Value at 100%",
          "resultVarId": 108,
          "resultVarType": "float",
          "expectedResultValue": [
            10.0
          ],
          "successResultVarId": 107,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Value at 100%"
        },
        {
          "name": "[Err] flow (duration -1f",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (duration -1f",
          "resultVarId": 110,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 110,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (duration -1f"
        },
        {
          "name": "[Err] flow (duration infinite",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (duration infinite",
          "resultVarId": 112,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 112,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (duration infinite"
        },
        {
          "name": "[Err] flow (p1 NaN)",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (p1 NaN)",
          "resultVarId": 114,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 114,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (p1 NaN)"
        },
        {
          "name": "[Err] flow (p2 NaN)",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (p2 NaN)",
          "resultVarId": 116,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 116,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (p2 NaN)"
        }
      ]
    },
    {
      "name": "variable/set and get",
      "description": "Set and Get variable test",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Variable bool",
          "nodeId": 861
        },
        {
          "name": "Set Variable int",
          "nodeId": 876
        },
        {
          "name": "Set Variable float",
          "nodeId": 891
        },
        {
          "name": "Set Variable float2",
          "nodeId": 907
        },
        {
          "name": "Set Variable float3",
          "nodeId": 922
        },
        {
          "name": "Set Variable float4",
          "nodeId": 937
        },
        {
          "name": "Get default value from Variable bool",
          "nodeId": 952
        },
        {
          "name": "Get default value from Variable int",
          "nodeId": 966
        },
        {
          "name": "Get default value from Variable float",
          "nodeId": 979
        },
        {
          "name": "Get default value from Variable float2",
          "nodeId": 993
        },
        {
          "name": "Get default value from Variable float3",
          "nodeId": 987
        },
        {
          "name": "Get default value from Variable float4",
          "nodeId": 803
        }
      ],
      "subTests": [
        {
          "name": "static bool",
          "resultVarName": "TestResult_variable/set and get_static bool",
          "resultVarId": 119,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 118,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static bool"
        },
        {
          "name": "static int",
          "resultVarName": "TestResult_variable/set and get_static int",
          "resultVarId": 122,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 121,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static int"
        },
        {
          "name": "static float",
          "resultVarName": "TestResult_variable/set and get_static float",
          "resultVarId": 125,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 124,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float"
        },
        {
          "name": "static float2",
          "resultVarName": "TestResult_variable/set and get_static float2",
          "resultVarId": 128,
          "resultVarType": "float2",
          "expectedResultValue": [
            1.0,
            1.0
          ],
          "successResultVarId": 127,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float2"
        },
        {
          "name": "static float3",
          "resultVarName": "TestResult_variable/set and get_static float3",
          "resultVarId": 131,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 130,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float3"
        },
        {
          "name": "static float4",
          "resultVarName": "TestResult_variable/set and get_static float4",
          "resultVarId": 134,
          "resultVarType": "float4",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 133,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float4"
        },
        {
          "name": "default bool",
          "resultVarName": "TestResult_variable/set and get_default bool",
          "resultVarId": 137,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 136,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default bool"
        },
        {
          "name": "default int",
          "resultVarName": "TestResult_variable/set and get_default int",
          "resultVarId": 140,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 139,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default int"
        },
        {
          "name": "default float",
          "resultVarName": "TestResult_variable/set and get_default float",
          "resultVarId": 143,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 142,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float"
        },
        {
          "name": "default float2",
          "resultVarName": "TestResult_variable/set and get_default float2",
          "resultVarId": 146,
          "resultVarType": "float2",
          "expectedResultValue": [
            1.0,
            1.0
          ],
          "successResultVarId": 145,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float2"
        },
        {
          "name": "default float3",
          "resultVarName": "TestResult_variable/set and get_default float3",
          "resultVarId": 149,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 148,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float3"
        },
        {
          "name": "default float4",
          "resultVarName": "TestResult_variable/set and get_default float4",
          "resultVarId": 152,
          "resultVarType": "float4",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 151,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float4"
        }
      ]
    },
    {
      "name": "variable/setMultiple",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set",
        "variable/setMultiple"
      ],
      "entryPoints": [
        {
          "name": "Set multiple variables",
          "nodeId": 628
        }
      ],
      "subTests": [
        {
          "name": "[var1]",
          "resultVarName": "TestResult_variable/setMultiple_[var1]",
          "resultVarId": 157,
          "resultVarType": "int",
          "expectedResultValue": [
            11
          ],
          "successResultVarId": 156,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var1]"
        },
        {
          "name": "[var2]",
          "resultVarName": "TestResult_variable/setMultiple_[var2]",
          "resultVarId": 159,
          "resultVarType": "int",
          "expectedResultValue": [
            22
          ],
          "successResultVarId": 158,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var2]"
        },
        {
          "name": "[var3]",
          "resultVarName": "TestResult_variable/setMultiple_[var3]",
          "resultVarId": 161,
          "resultVarType": "int",
          "expectedResultValue": [
            33
          ],
          "successResultVarId": 160,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var3]"
        }
      ]
    }
  ],
  "usedSchemas": [
    "debug/log",
    "event/onStart",
    "event/onTick",
    "flow/branch",
    "flow/cancelDelay",
    "flow/doN",
    "flow/for",
    "flow/multiGate",
    "flow/sequence",
    "flow/setDelay",
    "flow/switch",
    "flow/throttle",
    "flow/waitAll",
    "flow/while",
    "math/abs",
    "math/add",
    "math/and",
    "math/eq",
    "math/isnan",
    "math/lt",
    "math/select",
    "math/sub",
    "pointer/set",
    "variable/get",
    "variable/interpolate",
    "variable/set",
    "variable/setMultiple"
  ]
}