{
  "glbFileName": "Overview.glb",
  "name": "Overview",
  "tests": [
    {
      "name": "Extras/Loop in Loop Tests",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/for",
        "flow/sequence",
        "flow/while",
        "math/add",
        "math/eq",
        "math/lt",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Loop in Loop",
          "nodeId": 13
        }
      ],
      "subTests": [
        {
          "name": "For-Loop in While-Loop-Body (Complete Count equal)",
          "resultVarName": "TestResult_Extras/Loop in Loop Tests_For-Loop in While-Loop-Body (Complete Count equal)",
          "resultVarId": 4,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 3,
          "successResultVarName": "TestResult_HasPassed_Extras/Loop in Loop Tests_For-Loop in While-Loop-Body (Complete Count equal)"
        },
        {
          "name": "For-Loop in While-Loop-Body (For-Body count)",
          "resultVarName": "TestResult_Extras/Loop in Loop Tests_For-Loop in While-Loop-Body (For-Body count)",
          "resultVarId": 6,
          "resultVarType": "int",
          "expectedResultValue": [
            15
          ],
          "successResultVarId": 5,
          "successResultVarName": "TestResult_HasPassed_Extras/Loop in Loop Tests_For-Loop in While-Loop-Body (For-Body count)"
        }
      ]
    },
    {
      "name": "Extras/Matrix Updates",
      "description": "Testing if globalMatrix and matrix will be updated in current frame/flow processing",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/and",
        "math/dot",
        "math/gt",
        "math/inverse",
        "math/length",
        "math/matCompose",
        "math/matDecompose",
        "math/matMul",
        "math/normalize",
        "math/sub",
        "pointer/get",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Matrix Update",
          "nodeId": 39
        }
      ],
      "subTests": [
        {
          "name": "matrix",
          "resultVarName": "TestResult_Extras/Matrix Updates_matrix",
          "resultVarId": 8,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            2.0,
            3.0
          ],
          "successResultVarId": 7,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_matrix"
        },
        {
          "name": "globalMatrix",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix",
          "resultVarId": 10,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            2.0,
            3.0
          ],
          "successResultVarId": 9,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix"
        },
        {
          "name": "globalMatrix from Child 1",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix from Child 1",
          "resultVarId": 12,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            2.0,
            3.0
          ],
          "successResultVarId": 11,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix from Child 1"
        },
        {
          "name": "globalMatrix from Child 2",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix from Child 2",
          "resultVarId": 14,
          "resultVarType": "float3",
          "expectedResultValue": [
            0.0,
            1.0,
            2.0
          ],
          "successResultVarId": 13,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix from Child 2"
        },
        {
          "name": "globalMatrix from Child 3",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix from Child 3",
          "resultVarId": 16,
          "resultVarType": "float3",
          "expectedResultValue": [
            0.0,
            1.0,
            2.0
          ],
          "successResultVarId": 15,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix from Child 3"
        }
      ]
    },
    {
      "name": "event/send and receive",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "event/receive",
        "event/send",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Without Parameters (delayed execution)",
          "nodeId": 499,
          "delayedExecutionTime": 1.0
        },
        {
          "name": "With Parameters (flow received) (delayed execution)",
          "nodeId": 543,
          "delayedExecutionTime": 1.0
        }
      ],
      "subTests": [
        {
          "name": "Without Parameters",
          "resultVarName": "TestResult_event/send and receive_Without Parameters",
          "resultVarId": 17,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 17,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Without Parameters"
        },
        {
          "name": "With Parameters (flow received)",
          "resultVarName": "TestResult_event/send and receive_With Parameters (flow received)",
          "resultVarId": 24,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 24,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_With Parameters (flow received)"
        },
        {
          "name": "Default Event Value (Int)",
          "resultVarName": "TestResult_event/send and receive_Default Event Value (Int)",
          "resultVarId": 19,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 18,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Default Event Value (Int)"
        },
        {
          "name": "Default Event Value (Bool)",
          "resultVarName": "TestResult_event/send and receive_Default Event Value (Bool)",
          "resultVarId": 21,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 20,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Default Event Value (Bool)"
        },
        {
          "name": "Default Event Value (Float)",
          "resultVarName": "TestResult_event/send and receive_Default Event Value (Float)",
          "resultVarId": 23,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 22,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Default Event Value (Float)"
        },
        {
          "name": "Rcv Parameter Int",
          "resultVarName": "TestResult_event/send and receive_Rcv Parameter Int",
          "resultVarId": 26,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 25,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Rcv Parameter Int"
        },
        {
          "name": "Rcv Parameter Bool",
          "resultVarName": "TestResult_event/send and receive_Rcv Parameter Bool",
          "resultVarId": 28,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 27,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Rcv Parameter Bool"
        },
        {
          "name": "Rcv Parameter Float",
          "resultVarName": "TestResult_event/send and receive_Rcv Parameter Float",
          "resultVarId": 30,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 29,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Rcv Parameter Float"
        }
      ]
    },
    {
      "name": "flow/branch",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Branch Condition True",
          "nodeId": 588
        },
        {
          "name": "Branch Condition False",
          "nodeId": 603
        }
      ],
      "subTests": [
        {
          "name": "True-Condition true-flow",
          "resultVarName": "TestResult_flow/branch_True-Condition true-flow",
          "resultVarId": 31,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 31,
          "successResultVarName": "TestResult_HasPassed_flow/branch_True-Condition true-flow"
        },
        {
          "name": "True-Condition false-flow",
          "resultVarName": "TestResult_flow/branch_True-Condition false-flow",
          "resultVarId": 32,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 32,
          "successResultVarName": "TestResult_HasPassed_flow/branch_True-Condition false-flow"
        },
        {
          "name": "False-Condition true-flow",
          "resultVarName": "TestResult_flow/branch_False-Condition true-flow",
          "resultVarId": 33,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 33,
          "successResultVarName": "TestResult_HasPassed_flow/branch_False-Condition true-flow"
        },
        {
          "name": "False-Condition false-flow",
          "resultVarName": "TestResult_flow/branch_False-Condition false-flow",
          "resultVarId": 34,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 34,
          "successResultVarName": "TestResult_HasPassed_flow/branch_False-Condition false-flow"
        }
      ]
    },
    {
      "name": "flow/doN",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/doN",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Do N - Iterations",
          "nodeId": 618
        },
        {
          "name": "Do N - Reset",
          "nodeId": 655
        },
        {
          "name": "Do N - Max Iteration",
          "nodeId": 672
        }
      ],
      "subTests": [
        {
          "name": "[out] flow",
          "resultVarName": "TestResult_flow/doN_[out] flow",
          "resultVarId": 36,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 36,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[out] flow"
        },
        {
          "name": "[out] iteration (5)",
          "resultVarName": "TestResult_flow/doN_[out] iteration (5)",
          "resultVarId": 38,
          "resultVarType": "int",
          "expectedResultValue": [
            5
          ],
          "successResultVarId": 37,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[out] iteration (5)"
        },
        {
          "name": "[currentCount]",
          "resultVarName": "TestResult_flow/doN_[currentCount]",
          "resultVarId": 40,
          "resultVarType": "int",
          "expectedResultValue": [
            5
          ],
          "successResultVarId": 39,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[currentCount]"
        },
        {
          "name": "[reset] flow (N = 2, out/out/out/reset/out/out)",
          "resultVarName": "TestResult_flow/doN_[reset] flow (N = 2, out/out/out/reset/out/out)",
          "resultVarId": 43,
          "resultVarType": "int",
          "expectedResultValue": [
            4
          ],
          "successResultVarId": 42,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[reset] flow (N = 2, out/out/out/reset/out/out)"
        },
        {
          "name": "Max Iteration flow",
          "resultVarName": "TestResult_flow/doN_Max Iteration flow",
          "resultVarId": 46,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 45,
          "successResultVarName": "TestResult_HasPassed_flow/doN_Max Iteration flow"
        }
      ]
    },
    {
      "name": "flow/for",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/for",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Loop Entry",
          "nodeId": 689
        }
      ],
      "subTests": [
        {
          "name": "[body] flow",
          "resultVarName": "TestResult_flow/for_[body] flow",
          "resultVarId": 49,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 49,
          "successResultVarName": "TestResult_HasPassed_flow/for_[body] flow"
        },
        {
          "name": "Loop range (0..10)",
          "resultVarName": "TestResult_flow/for_Loop range (0..10)",
          "resultVarId": 52,
          "resultVarType": "int",
          "expectedResultValue": [
            10
          ],
          "successResultVarId": 51,
          "successResultVarName": "TestResult_HasPassed_flow/for_Loop range (0..10)"
        },
        {
          "name": "[completed] flow",
          "resultVarName": "TestResult_flow/for_[completed] flow",
          "resultVarId": 53,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 53,
          "successResultVarName": "TestResult_HasPassed_flow/for_[completed] flow"
        },
        {
          "name": "Initial index",
          "resultVarName": "TestResult_flow/for_Initial index",
          "resultVarId": 48,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 47,
          "successResultVarName": "TestResult_HasPassed_flow/for_Initial index"
        },
        {
          "name": "[index] when completed",
          "resultVarName": "TestResult_flow/for_[index] when completed",
          "resultVarId": 55,
          "resultVarType": "int",
          "expectedResultValue": [
            10
          ],
          "successResultVarId": 54,
          "successResultVarName": "TestResult_HasPassed_flow/for_[index] when completed"
        }
      ]
    },
    {
      "name": "flow/multiGate",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/multiGate",
        "flow/sequence",
        "math/add",
        "math/and",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Order (008, 004, 001) > (001, 004, 008)",
          "nodeId": 739
        },
        {
          "name": "Random (Check if all out flows are triggered once)",
          "nodeId": 767
        },
        {
          "name": "Loop",
          "nodeId": 794
        },
        {
          "name": "Loop",
          "nodeId": 827
        }
      ],
      "subTests": [
        {
          "name": "Loop",
          "resultVarName": "TestResult_flow/multiGate_Loop",
          "resultVarId": 67,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 67,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Loop"
        },
        {
          "name": "Random (Check if all out flows are triggered once)",
          "resultVarName": "TestResult_flow/multiGate_Random (Check if all out flows are triggered once)",
          "resultVarId": 62,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 62,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Random (Check if all out flows are triggered once)"
        },
        {
          "name": "Order (008, 004, 001) > (001, 004, 008)",
          "resultVarName": "TestResult_flow/multiGate_Order (008, 004, 001) > (001, 004, 008)",
          "resultVarId": 57,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 57,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Order (008, 004, 001) > (001, 004, 008)"
        },
        {
          "name": "Reset Loop",
          "resultVarName": "TestResult_flow/multiGate_Reset Loop",
          "resultVarId": 72,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 72,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Reset Loop"
        }
      ]
    },
    {
      "name": "flow/sequence",
      "description": "Tests the sequence order of the flow outputs.",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Sequence Order (0,9,10) > (0,10,9)",
          "nodeId": 857
        },
        {
          "name": "Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "nodeId": 883
        },
        {
          "name": "Sequence Order (b,B,a,A) > (A,B,a,b)",
          "nodeId": 909
        }
      ],
      "subTests": [
        {
          "name": "Sequence Order (0,9,10) > (0,10,9)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (0,9,10) > (0,10,9)",
          "resultVarId": 75,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 75,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (0,9,10) > (0,10,9)"
        },
        {
          "name": "Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "resultVarId": 77,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 77,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (ccc,aaa,b) > (aaa,b,ccc)"
        },
        {
          "name": "Sequence Order (b,B,a,A) > (A,B,a,b)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (b,B,a,A) > (A,B,a,b)",
          "resultVarId": 79,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 79,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (b,B,a,A) > (A,B,a,b)"
        }
      ]
    },
    {
      "name": "flow/setDelay and cancelDelay",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "event/onTick",
        "flow/branch",
        "flow/cancelDelay",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/add",
        "math/eq",
        "math/isNaN",
        "math/lt",
        "math/select",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Delay (delayed execution)",
          "nodeId": 939,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "setDelay [cancel] (delayed execution)",
          "nodeId": 981,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Cancel Delay (delayed execution)",
          "nodeId": 992,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Error (delayed execution)",
          "nodeId": 1011,
          "delayedExecutionTime": 2.0
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [out]",
          "resultVarId": 85,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [out]"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done]",
          "resultVarId": 81,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 81,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done]"
        },
        {
          "name": "Flow [done] \nin correct delay",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done] \nin correct delay",
          "resultVarId": 83,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 82,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done] \nin correct delay"
        },
        {
          "name": "Flow [err]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [err]",
          "resultVarId": 89,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 89,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [err]"
        },
        {
          "name": "setDelay [cancel]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_setDelay [cancel]",
          "resultVarId": 86,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 86,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_setDelay [cancel]"
        },
        {
          "name": "cancelDelay triggered",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay triggered",
          "resultVarId": 87,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 87,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay triggered"
        },
        {
          "name": "cancelDelay \nFlow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]",
          "resultVarId": 88,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 88,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]"
        }
      ]
    },
    {
      "name": "flow/switch",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/switch",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Switch selection flow",
          "nodeId": 1021
        },
        {
          "name": "Switch default flow",
          "nodeId": 1030
        },
        {
          "name": "Switch empty-cases default flow",
          "nodeId": 1039
        },
        {
          "name": "Switch negate cases flow",
          "nodeId": 1048
        }
      ],
      "subTests": [
        {
          "name": "Selection flow",
          "resultVarName": "TestResult_flow/switch_Selection flow",
          "resultVarId": 90,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 90,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Selection flow"
        },
        {
          "name": "Default flow",
          "resultVarName": "TestResult_flow/switch_Default flow",
          "resultVarId": 91,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 91,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Default flow"
        },
        {
          "name": "Empty cases default flow",
          "resultVarName": "TestResult_flow/switch_Empty cases default flow",
          "resultVarId": 92,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 92,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Empty cases default flow"
        },
        {
          "name": "Negate cases flow",
          "resultVarName": "TestResult_flow/switch_Negate cases flow",
          "resultVarId": 93,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 93,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Negate cases flow"
        }
      ]
    },
    {
      "name": "flow/throttle",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "flow/throttle",
        "math/abs",
        "math/add",
        "math/eq",
        "math/lt",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "[out] flow",
          "nodeId": 1057
        },
        {
          "name": "Flow Out After Delay (delayed execution)",
          "nodeId": 1082,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "[err] Flow on -1 Duration",
          "nodeId": 1106
        },
        {
          "name": "[reset]",
          "nodeId": 1121
        }
      ],
      "subTests": [
        {
          "name": "[out] flow",
          "resultVarName": "TestResult_flow/throttle_[out] flow",
          "resultVarId": 97,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[out] flow"
        },
        {
          "name": "[lastRemainingTime]",
          "resultVarName": "TestResult_flow/throttle_[lastRemainingTime]",
          "resultVarId": 95,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 94,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[lastRemainingTime]"
        },
        {
          "name": "Flow Out After Delay",
          "resultVarName": "TestResult_flow/throttle_Flow Out After Delay",
          "resultVarId": 100,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_Flow Out After Delay"
        },
        {
          "name": "SubTest: setDelay",
          "resultVarName": "TestResult_flow/throttle_SubTest: setDelay",
          "resultVarId": 98,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 98,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_SubTest: setDelay"
        },
        {
          "name": "[err] Flow on -1 Duration",
          "resultVarName": "TestResult_flow/throttle_[err] Flow on -1 Duration",
          "resultVarId": 101,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 101,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[err] Flow on -1 Duration"
        },
        {
          "name": "Ignore [out] when error",
          "resultVarName": "TestResult_flow/throttle_Ignore [out] when error",
          "resultVarId": 102,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 102,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_Ignore [out] when error"
        },
        {
          "name": "[reset]",
          "resultVarName": "TestResult_flow/throttle_[reset]",
          "resultVarId": 104,
          "resultVarType": "int",
          "expectedResultValue": [
            3
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[reset]"
        }
      ]
    },
    {
      "name": "flow/waitAll",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/waitAll",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Wait All - Completed",
          "nodeId": 1134
        },
        {
          "name": "Wait All - Remaining",
          "nodeId": 1154
        },
        {
          "name": "Wait All - Reset",
          "nodeId": 1169
        },
        {
          "name": "Wait All - Reset Completed",
          "nodeId": 1184
        }
      ],
      "subTests": [
        {
          "name": "[completed]",
          "resultVarName": "TestResult_flow/waitAll_[completed]",
          "resultVarId": 107,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 107,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[completed]"
        },
        {
          "name": "[remainingInputs] on completed",
          "resultVarName": "TestResult_flow/waitAll_[remainingInputs] on completed",
          "resultVarId": 106,
          "resultVarType": "int",
          "expectedResultValue": [
            0
          ],
          "successResultVarId": 105,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[remainingInputs] on completed"
        },
        {
          "name": "[remainingInputs]",
          "resultVarName": "TestResult_flow/waitAll_[remainingInputs]",
          "resultVarId": 109,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 108,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[remainingInputs]"
        },
        {
          "name": "[reset]",
          "resultVarName": "TestResult_flow/waitAll_[reset]",
          "resultVarId": 111,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 110,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[reset]"
        },
        {
          "name": "[reset] [completed]",
          "resultVarName": "TestResult_flow/waitAll_[reset] [completed]",
          "resultVarId": 113,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[reset] [completed]"
        }
      ]
    },
    {
      "name": "flow/while",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/while",
        "math/add",
        "math/eq",
        "math/lt",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "While Loop flowIn",
          "nodeId": 1199
        },
        {
          "name": "While Loop flowIn (false Condition)",
          "nodeId": 1228
        }
      ],
      "subTests": [
        {
          "name": "[body] flow",
          "resultVarName": "TestResult_flow/while_[body] flow",
          "resultVarId": 115,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 115,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] flow"
        },
        {
          "name": "[completed] flow",
          "resultVarName": "TestResult_flow/while_[completed] flow",
          "resultVarId": 118,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 118,
          "successResultVarName": "TestResult_HasPassed_flow/while_[completed] flow"
        },
        {
          "name": "[body] iteration (2)",
          "resultVarName": "TestResult_flow/while_[body] iteration (2)",
          "resultVarId": 117,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 116,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] iteration (2)"
        },
        {
          "name": "[body] flow when false",
          "resultVarName": "TestResult_flow/while_[body] flow when false",
          "resultVarId": 119,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 119,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] flow when false"
        },
        {
          "name": "[completed] flow when false",
          "resultVarName": "TestResult_flow/while_[completed] flow when false",
          "resultVarId": 120,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 120,
          "successResultVarName": "TestResult_HasPassed_flow/while_[completed] flow when false"
        }
      ]
    },
    {
      "name": "pointer/set and get",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/get",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/color",
          "nodeId": 1242
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity",
          "nodeId": 1257
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/range",
          "nodeId": 1272
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle",
          "nodeId": 1287
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle",
          "nodeId": 1302
        },
        {
          "name": "/alphaCutoff",
          "nodeId": 1317
        },
        {
          "name": "/emissiveFactor",
          "nodeId": 1332
        },
        {
          "name": "/normalTexture/scale",
          "nodeId": 1347
        },
        {
          "name": "/occlusionTexture/strength",
          "nodeId": 1362
        },
        {
          "name": "/normalTexture texture offset",
          "nodeId": 1377
        },
        {
          "name": "/normalTexture texture rotation",
          "nodeId": 1392
        },
        {
          "name": "/normalTexture texture scale",
          "nodeId": 1407
        },
        {
          "name": "/occlusionTexture texture offset",
          "nodeId": 1422
        },
        {
          "name": "/occlusionTexture texture rotation",
          "nodeId": 1437
        },
        {
          "name": "/occlusionTexture texture scale",
          "nodeId": 1452
        },
        {
          "name": "/emissiveTexture texture offset",
          "nodeId": 1467
        },
        {
          "name": "/emissiveTexture texture rotation",
          "nodeId": 1482
        },
        {
          "name": "/emissiveTexture texture scale",
          "nodeId": 1497
        },
        {
          "name": "pbrMetallicRoughness/baseColorFactor",
          "nodeId": 1512
        },
        {
          "name": "pbrMetallicRoughness/metallicFactor",
          "nodeId": 1527
        },
        {
          "name": "pbrMetallicRoughness/roughnessFactor",
          "nodeId": 1542
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture offset",
          "nodeId": 1557
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture rotation",
          "nodeId": 1572
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture scale",
          "nodeId": 1587
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture offset",
          "nodeId": 1602
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture rotation",
          "nodeId": 1617
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture scale",
          "nodeId": 1632
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyStrength",
          "nodeId": 1647
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyRotation",
          "nodeId": 1662
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture offset",
          "nodeId": 1677
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture rotation",
          "nodeId": 1692
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture scale",
          "nodeId": 1707
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture offset",
          "nodeId": 1722
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture rotation",
          "nodeId": 1737
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture scale",
          "nodeId": 1752
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset",
          "nodeId": 1767
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation",
          "nodeId": 1782
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale",
          "nodeId": 1797
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture offset",
          "nodeId": 1812
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture rotation",
          "nodeId": 1827
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture scale",
          "nodeId": 1842
        },
        {
          "name": "KHR_materials_dispersion/dispersion",
          "nodeId": 1857
        },
        {
          "name": "KHR_materials_emissive_strength/emissiveStrength",
          "nodeId": 1872
        },
        {
          "name": "KHR_materials_ior/ior",
          "nodeId": 1887
        },
        {
          "name": "KHR_materials_iridescence/iridescenceFactor",
          "nodeId": 1902
        },
        {
          "name": "KHR_materials_iridescence/iridescenceIor",
          "nodeId": 1917
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMinimum",
          "nodeId": 1932
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMaximum",
          "nodeId": 1947
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture offset",
          "nodeId": 1962
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture rotation",
          "nodeId": 1977
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture scale",
          "nodeId": 1992
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture offset",
          "nodeId": 2007
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture rotation",
          "nodeId": 2022
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture scale",
          "nodeId": 2037
        },
        {
          "name": "KHR_materials_sheen/sheenColorFactor",
          "nodeId": 2052
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessFactor",
          "nodeId": 2067
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture offset",
          "nodeId": 2082
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture rotation",
          "nodeId": 2097
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture scale",
          "nodeId": 2112
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture offset",
          "nodeId": 2127
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture rotation",
          "nodeId": 2142
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture scale",
          "nodeId": 2157
        },
        {
          "name": "KHR_materials_specular/specularFactor",
          "nodeId": 2172
        },
        {
          "name": "KHR_materials_specular/specularColorFactor",
          "nodeId": 2187
        },
        {
          "name": "KHR_materials_specular/specularTexture texture offset",
          "nodeId": 2202
        },
        {
          "name": "KHR_materials_specular/specularTexture texture rotation",
          "nodeId": 2217
        },
        {
          "name": "KHR_materials_specular/specularTexture texture scale",
          "nodeId": 2232
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture offset",
          "nodeId": 2247
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture rotation",
          "nodeId": 2262
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture scale",
          "nodeId": 2277
        },
        {
          "name": "KHR_materials_transmission/transmissionFactor",
          "nodeId": 2292
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture offset",
          "nodeId": 2307
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture rotation",
          "nodeId": 2322
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture scale",
          "nodeId": 2337
        },
        {
          "name": "KHR_materials_volume/thicknessFactor",
          "nodeId": 2352
        },
        {
          "name": "KHR_materials_volume/attenuationDistance",
          "nodeId": 2367
        },
        {
          "name": "KHR_materials_volume/attenuationColor",
          "nodeId": 2382
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture offset",
          "nodeId": 2397
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture rotation",
          "nodeId": 2412
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture scale",
          "nodeId": 2427
        }
      ],
      "subTests": [
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/color",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/color",
          "resultVarId": 122,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 121,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/color"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity",
          "resultVarId": 124,
          "resultVarType": "float",
          "expectedResultValue": [
            4.0
          ],
          "successResultVarId": 123,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/range",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/range",
          "resultVarId": 126,
          "resultVarType": "float",
          "expectedResultValue": [
            9.0
          ],
          "successResultVarId": 125,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/range"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle",
          "resultVarId": 128,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 127,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle",
          "resultVarId": 130,
          "resultVarType": "float",
          "expectedResultValue": [
            5.0
          ],
          "successResultVarId": 129,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle"
        },
        {
          "name": "/alphaCutoff",
          "resultVarName": "TestResult_pointer/set and get_/alphaCutoff",
          "resultVarId": 132,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 131,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/alphaCutoff"
        },
        {
          "name": "/emissiveFactor",
          "resultVarName": "TestResult_pointer/set and get_/emissiveFactor",
          "resultVarId": 134,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 133,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveFactor"
        },
        {
          "name": "/normalTexture/scale",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture/scale",
          "resultVarId": 136,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 135,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture/scale"
        },
        {
          "name": "/occlusionTexture/strength",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture/strength",
          "resultVarId": 138,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 137,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture/strength"
        },
        {
          "name": "/normalTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture texture offset",
          "resultVarId": 140,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 139,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture texture offset"
        },
        {
          "name": "/normalTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture texture rotation",
          "resultVarId": 142,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 141,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture texture rotation"
        },
        {
          "name": "/normalTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture texture scale",
          "resultVarId": 144,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 143,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture texture scale"
        },
        {
          "name": "/occlusionTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture texture offset",
          "resultVarId": 146,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 145,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture texture offset"
        },
        {
          "name": "/occlusionTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture texture rotation",
          "resultVarId": 148,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 147,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture texture rotation"
        },
        {
          "name": "/occlusionTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture texture scale",
          "resultVarId": 150,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 149,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture texture scale"
        },
        {
          "name": "/emissiveTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_/emissiveTexture texture offset",
          "resultVarId": 152,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 151,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveTexture texture offset"
        },
        {
          "name": "/emissiveTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_/emissiveTexture texture rotation",
          "resultVarId": 154,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 153,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveTexture texture rotation"
        },
        {
          "name": "/emissiveTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_/emissiveTexture texture scale",
          "resultVarId": 156,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 155,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveTexture texture scale"
        },
        {
          "name": "pbrMetallicRoughness/baseColorFactor",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorFactor",
          "resultVarId": 158,
          "resultVarType": "float4",
          "expectedResultValue": [
            0.0,
            0.0,
            1.0,
            1.0
          ],
          "successResultVarId": 157,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorFactor"
        },
        {
          "name": "pbrMetallicRoughness/metallicFactor",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicFactor",
          "resultVarId": 160,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 159,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicFactor"
        },
        {
          "name": "pbrMetallicRoughness/roughnessFactor",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/roughnessFactor",
          "resultVarId": 162,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 161,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/roughnessFactor"
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture offset",
          "resultVarId": 164,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 163,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture offset"
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture rotation",
          "resultVarId": 166,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 165,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture rotation"
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture scale",
          "resultVarId": 168,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 167,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture scale"
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture offset",
          "resultVarId": 170,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 169,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture offset"
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture rotation",
          "resultVarId": 172,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 171,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture rotation"
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture scale",
          "resultVarId": 174,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 173,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture scale"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyStrength",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyStrength",
          "resultVarId": 176,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 175,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyStrength"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyRotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyRotation",
          "resultVarId": 178,
          "resultVarType": "float",
          "expectedResultValue": [
            30.0
          ],
          "successResultVarId": 177,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyRotation"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture offset",
          "resultVarId": 180,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 179,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture offset"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture rotation",
          "resultVarId": 182,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 181,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture rotation"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture scale",
          "resultVarId": 184,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 183,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture scale"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture offset",
          "resultVarId": 186,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 185,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture offset"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture rotation",
          "resultVarId": 188,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 187,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture rotation"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture scale",
          "resultVarId": 190,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 189,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture scale"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset",
          "resultVarId": 192,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 191,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation",
          "resultVarId": 194,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 193,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale",
          "resultVarId": 196,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 195,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture offset",
          "resultVarId": 198,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 197,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture offset"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture rotation",
          "resultVarId": 200,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 199,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture rotation"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture scale",
          "resultVarId": 202,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 201,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture scale"
        },
        {
          "name": "KHR_materials_dispersion/dispersion",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_dispersion/dispersion",
          "resultVarId": 204,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 203,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_dispersion/dispersion"
        },
        {
          "name": "KHR_materials_emissive_strength/emissiveStrength",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_emissive_strength/emissiveStrength",
          "resultVarId": 206,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 205,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_emissive_strength/emissiveStrength"
        },
        {
          "name": "KHR_materials_ior/ior",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_ior/ior",
          "resultVarId": 208,
          "resultVarType": "float",
          "expectedResultValue": [
            3.0
          ],
          "successResultVarId": 207,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_ior/ior"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceFactor",
          "resultVarId": 210,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 209,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceFactor"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceIor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceIor",
          "resultVarId": 212,
          "resultVarType": "float",
          "expectedResultValue": [
            2.3
          ],
          "successResultVarId": 211,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceIor"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMinimum",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMinimum",
          "resultVarId": 214,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 213,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMinimum"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMaximum",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMaximum",
          "resultVarId": 216,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 215,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMaximum"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture offset",
          "resultVarId": 218,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 217,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture offset"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture rotation",
          "resultVarId": 220,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 219,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture rotation"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture scale",
          "resultVarId": 222,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 221,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture scale"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture offset",
          "resultVarId": 224,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 223,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture offset"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture rotation",
          "resultVarId": 226,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 225,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture rotation"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture scale",
          "resultVarId": 228,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 227,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture scale"
        },
        {
          "name": "KHR_materials_sheen/sheenColorFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorFactor",
          "resultVarId": 230,
          "resultVarType": "float3",
          "expectedResultValue": [
            0.0,
            0.0,
            1.0
          ],
          "successResultVarId": 229,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorFactor"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessFactor",
          "resultVarId": 232,
          "resultVarType": "float",
          "expectedResultValue": [
            2.3
          ],
          "successResultVarId": 231,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessFactor"
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture offset",
          "resultVarId": 234,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 233,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture offset"
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture rotation",
          "resultVarId": 236,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 235,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture rotation"
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture scale",
          "resultVarId": 238,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 237,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture scale"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture offset",
          "resultVarId": 240,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 239,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture offset"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture rotation",
          "resultVarId": 242,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 241,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture rotation"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture scale",
          "resultVarId": 244,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 243,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture scale"
        },
        {
          "name": "KHR_materials_specular/specularFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularFactor",
          "resultVarId": 246,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 245,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularFactor"
        },
        {
          "name": "KHR_materials_specular/specularColorFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorFactor",
          "resultVarId": 248,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 247,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorFactor"
        },
        {
          "name": "KHR_materials_specular/specularTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularTexture texture offset",
          "resultVarId": 250,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 249,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularTexture texture offset"
        },
        {
          "name": "KHR_materials_specular/specularTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularTexture texture rotation",
          "resultVarId": 252,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 251,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularTexture texture rotation"
        },
        {
          "name": "KHR_materials_specular/specularTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularTexture texture scale",
          "resultVarId": 254,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 253,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularTexture texture scale"
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorTexture texture offset",
          "resultVarId": 256,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 255,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorTexture texture offset"
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorTexture texture rotation",
          "resultVarId": 258,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 257,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorTexture texture rotation"
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorTexture texture scale",
          "resultVarId": 260,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 259,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorTexture texture scale"
        },
        {
          "name": "KHR_materials_transmission/transmissionFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionFactor",
          "resultVarId": 262,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 261,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionFactor"
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionTexture texture offset",
          "resultVarId": 264,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 263,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionTexture texture offset"
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionTexture texture rotation",
          "resultVarId": 266,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 265,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionTexture texture rotation"
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionTexture texture scale",
          "resultVarId": 268,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 267,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionTexture texture scale"
        },
        {
          "name": "KHR_materials_volume/thicknessFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessFactor",
          "resultVarId": 270,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 269,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessFactor"
        },
        {
          "name": "KHR_materials_volume/attenuationDistance",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/attenuationDistance",
          "resultVarId": 272,
          "resultVarType": "float",
          "expectedResultValue": [
            2.2
          ],
          "successResultVarId": 271,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/attenuationDistance"
        },
        {
          "name": "KHR_materials_volume/attenuationColor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/attenuationColor",
          "resultVarId": 274,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 273,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/attenuationColor"
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessTexture texture offset",
          "resultVarId": 276,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 275,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessTexture texture offset"
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessTexture texture rotation",
          "resultVarId": 278,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 277,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessTexture texture rotation"
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessTexture texture scale",
          "resultVarId": 280,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 279,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessTexture texture scale"
        }
      ]
    },
    {
      "name": "prerequisites/Tests required operations",
      "description": "Testing required operations for proper test execution. This tests should be passed before testing all other tests.",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/add",
        "math/and",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Entry",
          "nodeId": 2442
        },
        {
          "name": "Delayed Check (delayed execution)",
          "nodeId": 2499,
          "delayedExecutionTime": 1.0
        }
      ],
      "subTests": [
        {
          "name": "Flow Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Flow Checks",
          "resultVarId": 281,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 281,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Flow Checks"
        },
        {
          "name": "Value Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Value Checks",
          "resultVarId": 283,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 282,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Value Checks"
        },
        {
          "name": "Value Proximity Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Value Proximity Checks",
          "resultVarId": 285,
          "resultVarType": "float",
          "expectedResultValue": [
            33.2114563
          ],
          "successResultVarId": 284,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Value Proximity Checks"
        },
        {
          "name": "Counter Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Counter Checks",
          "resultVarId": 288,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 287,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Counter Checks"
        },
        {
          "name": "Multi Flow Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Multi Flow Checks",
          "resultVarId": 291,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 291,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Multi Flow Checks"
        },
        {
          "name": "Delayed Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Delayed Checks",
          "resultVarId": 292,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 292,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Delayed Checks"
        }
      ]
    },
    {
      "name": "variable/interpolate",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/eq",
        "math/lt",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/interpolate",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Interpolate (delayed execution)",
          "nodeId": 2509,
          "delayedExecutionTime": 4.5
        },
        {
          "name": "[Err] flow (duration -1f",
          "nodeId": 2553
        },
        {
          "name": "[Err] flow (duration infinite",
          "nodeId": 2562
        },
        {
          "name": "[Err] flow (p1 NaN)",
          "nodeId": 2571
        },
        {
          "name": "[Err] flow (p2 NaN)",
          "nodeId": 2580
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_variable/interpolate_Flow [out]",
          "resultVarId": 294,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 294,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Flow [out]"
        },
        {
          "name": "Value at 50%",
          "resultVarName": "TestResult_variable/interpolate_Value at 50%",
          "resultVarId": 297,
          "resultVarType": "float",
          "expectedResultValue": [
            8.75
          ],
          "successResultVarId": 296,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Value at 50%"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_variable/interpolate_Flow [done]",
          "resultVarId": 295,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 295,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Flow [done]"
        },
        {
          "name": "Value at 100%",
          "resultVarName": "TestResult_variable/interpolate_Value at 100%",
          "resultVarId": 299,
          "resultVarType": "float",
          "expectedResultValue": [
            10.0
          ],
          "successResultVarId": 298,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Value at 100%"
        },
        {
          "name": "[Err] flow (duration -1f",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (duration -1f",
          "resultVarId": 301,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 301,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (duration -1f"
        },
        {
          "name": "[Err] flow (duration infinite",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (duration infinite",
          "resultVarId": 303,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 303,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (duration infinite"
        },
        {
          "name": "[Err] flow (p1 NaN)",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (p1 NaN)",
          "resultVarId": 305,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 305,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (p1 NaN)"
        },
        {
          "name": "[Err] flow (p2 NaN)",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (p2 NaN)",
          "resultVarId": 307,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 307,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (p2 NaN)"
        }
      ]
    },
    {
      "name": "variable/set and get",
      "description": "Set and Get variable test",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Variable bool",
          "nodeId": 2590
        },
        {
          "name": "Set Variable int",
          "nodeId": 2604
        },
        {
          "name": "Set Variable float",
          "nodeId": 2618
        },
        {
          "name": "Set Variable float2",
          "nodeId": 2632
        },
        {
          "name": "Set Variable float3",
          "nodeId": 2646
        },
        {
          "name": "Set Variable float4",
          "nodeId": 2660
        },
        {
          "name": "Get default value from Variable bool",
          "nodeId": 2674
        },
        {
          "name": "Get default value from Variable int",
          "nodeId": 2687
        },
        {
          "name": "Get default value from Variable float",
          "nodeId": 2700
        },
        {
          "name": "Get default value from Variable float2",
          "nodeId": 2713
        },
        {
          "name": "Get default value from Variable float3",
          "nodeId": 2726
        },
        {
          "name": "Get default value from Variable float4",
          "nodeId": 2739
        }
      ],
      "subTests": [
        {
          "name": "static bool",
          "resultVarName": "TestResult_variable/set and get_static bool",
          "resultVarId": 310,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 309,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static bool"
        },
        {
          "name": "static int",
          "resultVarName": "TestResult_variable/set and get_static int",
          "resultVarId": 313,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 312,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static int"
        },
        {
          "name": "static float",
          "resultVarName": "TestResult_variable/set and get_static float",
          "resultVarId": 316,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 315,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float"
        },
        {
          "name": "static float2",
          "resultVarName": "TestResult_variable/set and get_static float2",
          "resultVarId": 319,
          "resultVarType": "float2",
          "expectedResultValue": [
            1.0,
            1.0
          ],
          "successResultVarId": 318,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float2"
        },
        {
          "name": "static float3",
          "resultVarName": "TestResult_variable/set and get_static float3",
          "resultVarId": 322,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 321,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float3"
        },
        {
          "name": "static float4",
          "resultVarName": "TestResult_variable/set and get_static float4",
          "resultVarId": 325,
          "resultVarType": "float4",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 324,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float4"
        },
        {
          "name": "default bool",
          "resultVarName": "TestResult_variable/set and get_default bool",
          "resultVarId": 328,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 327,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default bool"
        },
        {
          "name": "default int",
          "resultVarName": "TestResult_variable/set and get_default int",
          "resultVarId": 331,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 330,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default int"
        },
        {
          "name": "default float",
          "resultVarName": "TestResult_variable/set and get_default float",
          "resultVarId": 334,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 333,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float"
        },
        {
          "name": "default float2",
          "resultVarName": "TestResult_variable/set and get_default float2",
          "resultVarId": 337,
          "resultVarType": "float2",
          "expectedResultValue": [
            1.0,
            1.0
          ],
          "successResultVarId": 336,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float2"
        },
        {
          "name": "default float3",
          "resultVarName": "TestResult_variable/set and get_default float3",
          "resultVarId": 340,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 339,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float3"
        },
        {
          "name": "default float4",
          "resultVarName": "TestResult_variable/set and get_default float4",
          "resultVarId": 343,
          "resultVarType": "float4",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 342,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float4"
        }
      ]
    },
    {
      "name": "variable/setMultiple",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set",
        "variable/setMultiple"
      ],
      "entryPoints": [
        {
          "name": "Set multiple variables",
          "nodeId": 2752
        }
      ],
      "subTests": [
        {
          "name": "[var1]",
          "resultVarName": "TestResult_variable/setMultiple_[var1]",
          "resultVarId": 348,
          "resultVarType": "int",
          "expectedResultValue": [
            11
          ],
          "successResultVarId": 347,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var1]"
        },
        {
          "name": "[var2]",
          "resultVarName": "TestResult_variable/setMultiple_[var2]",
          "resultVarId": 350,
          "resultVarType": "int",
          "expectedResultValue": [
            22
          ],
          "successResultVarId": 349,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var2]"
        },
        {
          "name": "[var3]",
          "resultVarName": "TestResult_variable/setMultiple_[var3]",
          "resultVarId": 352,
          "resultVarType": "int",
          "expectedResultValue": [
            33
          ],
          "successResultVarId": 351,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var3]"
        }
      ]
    }
  ],
  "usedSchemas": [
    "debug/log",
    "event/onStart",
    "event/onTick",
    "event/receive",
    "event/send",
    "flow/branch",
    "flow/cancelDelay",
    "flow/doN",
    "flow/for",
    "flow/multiGate",
    "flow/sequence",
    "flow/setDelay",
    "flow/switch",
    "flow/throttle",
    "flow/waitAll",
    "flow/while",
    "math/abs",
    "math/add",
    "math/and",
    "math/dot",
    "math/eq",
    "math/gt",
    "math/inverse",
    "math/isNaN",
    "math/length",
    "math/lt",
    "math/matCompose",
    "math/matDecompose",
    "math/matMul",
    "math/normalize",
    "math/select",
    "math/sub",
    "pointer/get",
    "pointer/set",
    "variable/get",
    "variable/interpolate",
    "variable/set",
    "variable/setMultiple"
  ]
}