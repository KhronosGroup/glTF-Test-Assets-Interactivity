{
  "glbFileName": "Overview.glb",
  "name": "Overview",
  "tests": [
    {
      "name": "Extras/Matrix Updates",
      "description": "Testing if globalMatrix and matrix will be updated in current frame/flow processing",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/and",
        "math/dot",
        "math/gt",
        "math/inverse",
        "math/length",
        "math/matCompose",
        "math/matDecompose",
        "math/matMul",
        "math/normalize",
        "math/sub",
        "pointer/get",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Matrix Update",
          "nodeId": 0
        }
      ],
      "subTests": [
        {
          "name": "matrix",
          "resultVarName": "TestResult_Extras/Matrix Updates_matrix",
          "resultVarId": 1,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            2.0,
            3.0
          ],
          "successResultVarId": 0,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_matrix"
        },
        {
          "name": "globalMatrix",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix",
          "resultVarId": 3,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            2.0,
            3.0
          ],
          "successResultVarId": 2,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix"
        },
        {
          "name": "globalMatrix from Child 1",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix from Child 1",
          "resultVarId": 5,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            2.0,
            3.0
          ],
          "successResultVarId": 4,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix from Child 1"
        },
        {
          "name": "globalMatrix from Child 2",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix from Child 2",
          "resultVarId": 7,
          "resultVarType": "float3",
          "expectedResultValue": [
            0.0,
            1.0,
            2.0
          ],
          "successResultVarId": 6,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix from Child 2"
        },
        {
          "name": "globalMatrix from Child 3",
          "resultVarName": "TestResult_Extras/Matrix Updates_globalMatrix from Child 3",
          "resultVarId": 9,
          "resultVarType": "float3",
          "expectedResultValue": [
            0.0,
            1.0,
            2.0
          ],
          "successResultVarId": 8,
          "successResultVarName": "TestResult_HasPassed_Extras/Matrix Updates_globalMatrix from Child 3"
        }
      ]
    },
    {
      "name": "event/send and receive",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "event/receive",
        "event/send",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Without Parameters (delayed execution)",
          "nodeId": 458,
          "delayedExecutionTime": 1.0
        },
        {
          "name": "With Parameters (flow received) (delayed execution)",
          "nodeId": 502,
          "delayedExecutionTime": 1.0
        }
      ],
      "subTests": [
        {
          "name": "Without Parameters",
          "resultVarName": "TestResult_event/send and receive_Without Parameters",
          "resultVarId": 10,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 10,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Without Parameters"
        },
        {
          "name": "With Parameters (flow received)",
          "resultVarName": "TestResult_event/send and receive_With Parameters (flow received)",
          "resultVarId": 17,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 17,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_With Parameters (flow received)"
        },
        {
          "name": "Default Event Value (Int)",
          "resultVarName": "TestResult_event/send and receive_Default Event Value (Int)",
          "resultVarId": 12,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 11,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Default Event Value (Int)"
        },
        {
          "name": "Default Event Value (Bool)",
          "resultVarName": "TestResult_event/send and receive_Default Event Value (Bool)",
          "resultVarId": 14,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 13,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Default Event Value (Bool)"
        },
        {
          "name": "Default Event Value (Float)",
          "resultVarName": "TestResult_event/send and receive_Default Event Value (Float)",
          "resultVarId": 16,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 15,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Default Event Value (Float)"
        },
        {
          "name": "Rcv Parameter Int",
          "resultVarName": "TestResult_event/send and receive_Rcv Parameter Int",
          "resultVarId": 19,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 18,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Rcv Parameter Int"
        },
        {
          "name": "Rcv Parameter Bool",
          "resultVarName": "TestResult_event/send and receive_Rcv Parameter Bool",
          "resultVarId": 21,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 20,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Rcv Parameter Bool"
        },
        {
          "name": "Rcv Parameter Float",
          "resultVarName": "TestResult_event/send and receive_Rcv Parameter Float",
          "resultVarId": 23,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 22,
          "successResultVarName": "TestResult_HasPassed_event/send and receive_Rcv Parameter Float"
        }
      ]
    },
    {
      "name": "flow/branch",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Branch Condition True",
          "nodeId": 547
        },
        {
          "name": "Branch Condition False",
          "nodeId": 562
        }
      ],
      "subTests": [
        {
          "name": "True-Condition true-flow",
          "resultVarName": "TestResult_flow/branch_True-Condition true-flow",
          "resultVarId": 24,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 24,
          "successResultVarName": "TestResult_HasPassed_flow/branch_True-Condition true-flow"
        },
        {
          "name": "True-Condition false-flow",
          "resultVarName": "TestResult_flow/branch_True-Condition false-flow",
          "resultVarId": 25,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 25,
          "successResultVarName": "TestResult_HasPassed_flow/branch_True-Condition false-flow"
        },
        {
          "name": "False-Condition true-flow",
          "resultVarName": "TestResult_flow/branch_False-Condition true-flow",
          "resultVarId": 26,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 26,
          "successResultVarName": "TestResult_HasPassed_flow/branch_False-Condition true-flow"
        },
        {
          "name": "False-Condition false-flow",
          "resultVarName": "TestResult_flow/branch_False-Condition false-flow",
          "resultVarId": 27,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 27,
          "successResultVarName": "TestResult_HasPassed_flow/branch_False-Condition false-flow"
        }
      ]
    },
    {
      "name": "flow/doN",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/doN",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Do N - Iterations",
          "nodeId": 577
        },
        {
          "name": "Do N - Reset",
          "nodeId": 614
        },
        {
          "name": "Do N - Max Iteration",
          "nodeId": 631
        }
      ],
      "subTests": [
        {
          "name": "[out] flow",
          "resultVarName": "TestResult_flow/doN_[out] flow",
          "resultVarId": 29,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 29,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[out] flow"
        },
        {
          "name": "[out] iteration (5)",
          "resultVarName": "TestResult_flow/doN_[out] iteration (5)",
          "resultVarId": 31,
          "resultVarType": "int",
          "expectedResultValue": [
            5
          ],
          "successResultVarId": 30,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[out] iteration (5)"
        },
        {
          "name": "[currentCount]",
          "resultVarName": "TestResult_flow/doN_[currentCount]",
          "resultVarId": 33,
          "resultVarType": "int",
          "expectedResultValue": [
            5
          ],
          "successResultVarId": 32,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[currentCount]"
        },
        {
          "name": "[reset] flow (N = 2, out/out/out/reset/out/out)",
          "resultVarName": "TestResult_flow/doN_[reset] flow (N = 2, out/out/out/reset/out/out)",
          "resultVarId": 36,
          "resultVarType": "int",
          "expectedResultValue": [
            4
          ],
          "successResultVarId": 35,
          "successResultVarName": "TestResult_HasPassed_flow/doN_[reset] flow (N = 2, out/out/out/reset/out/out)"
        },
        {
          "name": "Max Iteration flow",
          "resultVarName": "TestResult_flow/doN_Max Iteration flow",
          "resultVarId": 39,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 38,
          "successResultVarName": "TestResult_HasPassed_flow/doN_Max Iteration flow"
        }
      ]
    },
    {
      "name": "flow/for",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/for",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Loop Entry",
          "nodeId": 648
        }
      ],
      "subTests": [
        {
          "name": "[body] flow",
          "resultVarName": "TestResult_flow/for_[body] flow",
          "resultVarId": 42,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 42,
          "successResultVarName": "TestResult_HasPassed_flow/for_[body] flow"
        },
        {
          "name": "Loop range (0..10)",
          "resultVarName": "TestResult_flow/for_Loop range (0..10)",
          "resultVarId": 45,
          "resultVarType": "int",
          "expectedResultValue": [
            10
          ],
          "successResultVarId": 44,
          "successResultVarName": "TestResult_HasPassed_flow/for_Loop range (0..10)"
        },
        {
          "name": "[completed] flow",
          "resultVarName": "TestResult_flow/for_[completed] flow",
          "resultVarId": 46,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 46,
          "successResultVarName": "TestResult_HasPassed_flow/for_[completed] flow"
        },
        {
          "name": "Initial index",
          "resultVarName": "TestResult_flow/for_Initial index",
          "resultVarId": 41,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 40,
          "successResultVarName": "TestResult_HasPassed_flow/for_Initial index"
        },
        {
          "name": "[index] when completed",
          "resultVarName": "TestResult_flow/for_[index] when completed",
          "resultVarId": 48,
          "resultVarType": "int",
          "expectedResultValue": [
            10
          ],
          "successResultVarId": 47,
          "successResultVarName": "TestResult_HasPassed_flow/for_[index] when completed"
        }
      ]
    },
    {
      "name": "flow/multiGate",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/multiGate",
        "flow/sequence",
        "math/add",
        "math/and",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Order (008, 004, 001) > (001, 004, 008)",
          "nodeId": 698
        },
        {
          "name": "Random (Check if all out flows are triggered once)",
          "nodeId": 726
        },
        {
          "name": "Loop",
          "nodeId": 753
        },
        {
          "name": "Loop",
          "nodeId": 786
        }
      ],
      "subTests": [
        {
          "name": "Loop",
          "resultVarName": "TestResult_flow/multiGate_Loop",
          "resultVarId": 60,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 60,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Loop"
        },
        {
          "name": "Random (Check if all out flows are triggered once)",
          "resultVarName": "TestResult_flow/multiGate_Random (Check if all out flows are triggered once)",
          "resultVarId": 55,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 55,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Random (Check if all out flows are triggered once)"
        },
        {
          "name": "Order (008, 004, 001) > (001, 004, 008)",
          "resultVarName": "TestResult_flow/multiGate_Order (008, 004, 001) > (001, 004, 008)",
          "resultVarId": 50,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 50,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Order (008, 004, 001) > (001, 004, 008)"
        },
        {
          "name": "Reset Loop",
          "resultVarName": "TestResult_flow/multiGate_Reset Loop",
          "resultVarId": 65,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 65,
          "successResultVarName": "TestResult_HasPassed_flow/multiGate_Reset Loop"
        }
      ]
    },
    {
      "name": "flow/sequence",
      "description": "Tests the sequence order of the flow outputs.",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Sequence Order (0,9,10) > (0,10,9)",
          "nodeId": 816
        },
        {
          "name": "Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "nodeId": 842
        },
        {
          "name": "Sequence Order (b,B,a,A) > (A,B,a,b)",
          "nodeId": 868
        }
      ],
      "subTests": [
        {
          "name": "Sequence Order (0,9,10) > (0,10,9)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (0,9,10) > (0,10,9)",
          "resultVarId": 68,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 68,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (0,9,10) > (0,10,9)"
        },
        {
          "name": "Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (ccc,aaa,b) > (aaa,b,ccc)",
          "resultVarId": 70,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 70,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (ccc,aaa,b) > (aaa,b,ccc)"
        },
        {
          "name": "Sequence Order (b,B,a,A) > (A,B,a,b)",
          "resultVarName": "TestResult_flow/sequence_Sequence Order (b,B,a,A) > (A,B,a,b)",
          "resultVarId": 72,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 72,
          "successResultVarName": "TestResult_HasPassed_flow/sequence_Sequence Order (b,B,a,A) > (A,B,a,b)"
        }
      ]
    },
    {
      "name": "flow/setDelay and cancelDelay",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "event/onTick",
        "flow/branch",
        "flow/cancelDelay",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/add",
        "math/eq",
        "math/isNaN",
        "math/lt",
        "math/select",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Delay (delayed execution)",
          "nodeId": 898,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "setDelay [cancel] (delayed execution)",
          "nodeId": 940,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Cancel Delay (delayed execution)",
          "nodeId": 951,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Error (delayed execution)",
          "nodeId": 970,
          "delayedExecutionTime": 2.0
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [out]",
          "resultVarId": 78,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [out]"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done]",
          "resultVarId": 74,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 74,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done]"
        },
        {
          "name": "Flow [done] \nin correct delay",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done] \nin correct delay",
          "resultVarId": 76,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 75,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done] \nin correct delay"
        },
        {
          "name": "Flow [err]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [err]",
          "resultVarId": 82,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 82,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [err]"
        },
        {
          "name": "setDelay [cancel]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_setDelay [cancel]",
          "resultVarId": 79,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 79,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_setDelay [cancel]"
        },
        {
          "name": "cancelDelay triggered",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay triggered",
          "resultVarId": 80,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 80,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay triggered"
        },
        {
          "name": "cancelDelay \nFlow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]",
          "resultVarId": 81,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 81,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]"
        }
      ]
    },
    {
      "name": "flow/switch",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/switch",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Switch selection flow",
          "nodeId": 980
        },
        {
          "name": "Switch default flow",
          "nodeId": 989
        },
        {
          "name": "Switch empty-cases default flow",
          "nodeId": 998
        },
        {
          "name": "Switch negate cases flow",
          "nodeId": 1007
        }
      ],
      "subTests": [
        {
          "name": "Selection flow",
          "resultVarName": "TestResult_flow/switch_Selection flow",
          "resultVarId": 83,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 83,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Selection flow"
        },
        {
          "name": "Default flow",
          "resultVarName": "TestResult_flow/switch_Default flow",
          "resultVarId": 84,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 84,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Default flow"
        },
        {
          "name": "Empty cases default flow",
          "resultVarName": "TestResult_flow/switch_Empty cases default flow",
          "resultVarId": 85,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 85,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Empty cases default flow"
        },
        {
          "name": "Negate cases flow",
          "resultVarName": "TestResult_flow/switch_Negate cases flow",
          "resultVarId": 86,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 86,
          "successResultVarName": "TestResult_HasPassed_flow/switch_Negate cases flow"
        }
      ]
    },
    {
      "name": "flow/throttle",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "flow/throttle",
        "math/abs",
        "math/add",
        "math/eq",
        "math/lt",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "[out] flow",
          "nodeId": 1016
        },
        {
          "name": "Flow Out After Delay (delayed execution)",
          "nodeId": 1041,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "[err] Flow on -1 Duration",
          "nodeId": 1065
        },
        {
          "name": "[reset]",
          "nodeId": 1080
        }
      ],
      "subTests": [
        {
          "name": "[out] flow",
          "resultVarName": "TestResult_flow/throttle_[out] flow",
          "resultVarId": 90,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[out] flow"
        },
        {
          "name": "[lastRemainingTime]",
          "resultVarName": "TestResult_flow/throttle_[lastRemainingTime]",
          "resultVarId": 88,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 87,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[lastRemainingTime]"
        },
        {
          "name": "Flow Out After Delay",
          "resultVarName": "TestResult_flow/throttle_Flow Out After Delay",
          "resultVarId": 93,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_Flow Out After Delay"
        },
        {
          "name": "SubTest: setDelay",
          "resultVarName": "TestResult_flow/throttle_SubTest: setDelay",
          "resultVarId": 91,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 91,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_SubTest: setDelay"
        },
        {
          "name": "[err] Flow on -1 Duration",
          "resultVarName": "TestResult_flow/throttle_[err] Flow on -1 Duration",
          "resultVarId": 94,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 94,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[err] Flow on -1 Duration"
        },
        {
          "name": "Ignore [out] when error",
          "resultVarName": "TestResult_flow/throttle_Ignore [out] when error",
          "resultVarId": 95,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 95,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_Ignore [out] when error"
        },
        {
          "name": "[reset]",
          "resultVarName": "TestResult_flow/throttle_[reset]",
          "resultVarId": 97,
          "resultVarType": "int",
          "expectedResultValue": [
            3
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/throttle_[reset]"
        }
      ]
    },
    {
      "name": "flow/waitAll",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/waitAll",
        "math/add",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Wait All - Completed",
          "nodeId": 1093
        },
        {
          "name": "Wait All - Remaining",
          "nodeId": 1113
        },
        {
          "name": "Wait All - Reset",
          "nodeId": 1128
        },
        {
          "name": "Wait All - Reset Completed",
          "nodeId": 1143
        }
      ],
      "subTests": [
        {
          "name": "[completed]",
          "resultVarName": "TestResult_flow/waitAll_[completed]",
          "resultVarId": 100,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 100,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[completed]"
        },
        {
          "name": "[remainingInputs] on completed",
          "resultVarName": "TestResult_flow/waitAll_[remainingInputs] on completed",
          "resultVarId": 99,
          "resultVarType": "int",
          "expectedResultValue": [
            0
          ],
          "successResultVarId": 98,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[remainingInputs] on completed"
        },
        {
          "name": "[remainingInputs]",
          "resultVarName": "TestResult_flow/waitAll_[remainingInputs]",
          "resultVarId": 102,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 101,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[remainingInputs]"
        },
        {
          "name": "[reset]",
          "resultVarName": "TestResult_flow/waitAll_[reset]",
          "resultVarId": 104,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 103,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[reset]"
        },
        {
          "name": "[reset] [completed]",
          "resultVarName": "TestResult_flow/waitAll_[reset] [completed]",
          "resultVarId": 106,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/waitAll_[reset] [completed]"
        }
      ]
    },
    {
      "name": "flow/while",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/while",
        "math/add",
        "math/eq",
        "math/lt",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "While Loop flowIn",
          "nodeId": 1158
        },
        {
          "name": "While Loop flowIn (false Condition)",
          "nodeId": 1187
        }
      ],
      "subTests": [
        {
          "name": "[body] flow",
          "resultVarName": "TestResult_flow/while_[body] flow",
          "resultVarId": 108,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 108,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] flow"
        },
        {
          "name": "[completed] flow",
          "resultVarName": "TestResult_flow/while_[completed] flow",
          "resultVarId": 111,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 111,
          "successResultVarName": "TestResult_HasPassed_flow/while_[completed] flow"
        },
        {
          "name": "[body] iteration (2)",
          "resultVarName": "TestResult_flow/while_[body] iteration (2)",
          "resultVarId": 110,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 109,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] iteration (2)"
        },
        {
          "name": "[body] flow when false",
          "resultVarName": "TestResult_flow/while_[body] flow when false",
          "resultVarId": 112,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 112,
          "successResultVarName": "TestResult_HasPassed_flow/while_[body] flow when false"
        },
        {
          "name": "[completed] flow when false",
          "resultVarName": "TestResult_flow/while_[completed] flow when false",
          "resultVarId": 113,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 113,
          "successResultVarName": "TestResult_HasPassed_flow/while_[completed] flow when false"
        }
      ]
    },
    {
      "name": "pointer/set and get",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/get",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/color",
          "nodeId": 1201
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity",
          "nodeId": 1216
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/range",
          "nodeId": 1231
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle",
          "nodeId": 1246
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle",
          "nodeId": 1261
        },
        {
          "name": "/alphaCutoff",
          "nodeId": 1276
        },
        {
          "name": "/emissiveFactor",
          "nodeId": 1291
        },
        {
          "name": "/normalTexture/scale",
          "nodeId": 1306
        },
        {
          "name": "/occlusionTexture/strength",
          "nodeId": 1321
        },
        {
          "name": "/normalTexture texture offset",
          "nodeId": 1336
        },
        {
          "name": "/normalTexture texture rotation",
          "nodeId": 1351
        },
        {
          "name": "/normalTexture texture scale",
          "nodeId": 1366
        },
        {
          "name": "/occlusionTexture texture offset",
          "nodeId": 1381
        },
        {
          "name": "/occlusionTexture texture rotation",
          "nodeId": 1396
        },
        {
          "name": "/occlusionTexture texture scale",
          "nodeId": 1411
        },
        {
          "name": "/emissiveTexture texture offset",
          "nodeId": 1426
        },
        {
          "name": "/emissiveTexture texture rotation",
          "nodeId": 1441
        },
        {
          "name": "/emissiveTexture texture scale",
          "nodeId": 1456
        },
        {
          "name": "pbrMetallicRoughness/baseColorFactor",
          "nodeId": 1471
        },
        {
          "name": "pbrMetallicRoughness/metallicFactor",
          "nodeId": 1486
        },
        {
          "name": "pbrMetallicRoughness/roughnessFactor",
          "nodeId": 1501
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture offset",
          "nodeId": 1516
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture rotation",
          "nodeId": 1531
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture scale",
          "nodeId": 1546
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture offset",
          "nodeId": 1561
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture rotation",
          "nodeId": 1576
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture scale",
          "nodeId": 1591
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyStrength",
          "nodeId": 1606
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyRotation",
          "nodeId": 1621
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture offset",
          "nodeId": 1636
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture rotation",
          "nodeId": 1651
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture scale",
          "nodeId": 1666
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture offset",
          "nodeId": 1681
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture rotation",
          "nodeId": 1696
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture scale",
          "nodeId": 1711
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset",
          "nodeId": 1726
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation",
          "nodeId": 1741
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale",
          "nodeId": 1756
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture offset",
          "nodeId": 1771
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture rotation",
          "nodeId": 1786
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture scale",
          "nodeId": 1801
        },
        {
          "name": "KHR_materials_dispersion/dispersion",
          "nodeId": 1816
        },
        {
          "name": "KHR_materials_emissive_strength/emissiveStrength",
          "nodeId": 1831
        },
        {
          "name": "KHR_materials_ior/ior",
          "nodeId": 1846
        },
        {
          "name": "KHR_materials_iridescence/iridescenceFactor",
          "nodeId": 1861
        },
        {
          "name": "KHR_materials_iridescence/iridescenceIor",
          "nodeId": 1876
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMinimum",
          "nodeId": 1891
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMaximum",
          "nodeId": 1906
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture offset",
          "nodeId": 1921
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture rotation",
          "nodeId": 1936
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture scale",
          "nodeId": 1951
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture offset",
          "nodeId": 1966
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture rotation",
          "nodeId": 1981
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture scale",
          "nodeId": 1996
        },
        {
          "name": "KHR_materials_sheen/sheenColorFactor",
          "nodeId": 2011
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessFactor",
          "nodeId": 2026
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture offset",
          "nodeId": 2041
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture rotation",
          "nodeId": 2056
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture scale",
          "nodeId": 2071
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture offset",
          "nodeId": 2086
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture rotation",
          "nodeId": 2101
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture scale",
          "nodeId": 2116
        },
        {
          "name": "KHR_materials_specular/specularFactor",
          "nodeId": 2131
        },
        {
          "name": "KHR_materials_specular/specularColorFactor",
          "nodeId": 2146
        },
        {
          "name": "KHR_materials_specular/specularTexture texture offset",
          "nodeId": 2161
        },
        {
          "name": "KHR_materials_specular/specularTexture texture rotation",
          "nodeId": 2176
        },
        {
          "name": "KHR_materials_specular/specularTexture texture scale",
          "nodeId": 2191
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture offset",
          "nodeId": 2206
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture rotation",
          "nodeId": 2221
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture scale",
          "nodeId": 2236
        },
        {
          "name": "KHR_materials_transmission/transmissionFactor",
          "nodeId": 2251
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture offset",
          "nodeId": 2266
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture rotation",
          "nodeId": 2281
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture scale",
          "nodeId": 2296
        },
        {
          "name": "KHR_materials_volume/thicknessFactor",
          "nodeId": 2311
        },
        {
          "name": "KHR_materials_volume/attenuationDistance",
          "nodeId": 2326
        },
        {
          "name": "KHR_materials_volume/attenuationColor",
          "nodeId": 2341
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture offset",
          "nodeId": 2356
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture rotation",
          "nodeId": 2371
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture scale",
          "nodeId": 2386
        }
      ],
      "subTests": [
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/color",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/color",
          "resultVarId": 115,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 114,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/color"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity",
          "resultVarId": 117,
          "resultVarType": "float",
          "expectedResultValue": [
            4.0
          ],
          "successResultVarId": 116,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/intensity"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/range",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/range",
          "resultVarId": 119,
          "resultVarType": "float",
          "expectedResultValue": [
            9.0
          ],
          "successResultVarId": 118,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/range"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle",
          "resultVarId": 121,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 120,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/innerConeAngle"
        },
        {
          "name": "/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle",
          "resultVarName": "TestResult_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle",
          "resultVarId": 123,
          "resultVarType": "float",
          "expectedResultValue": [
            5.0
          ],
          "successResultVarId": 122,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/extensions/KHR_lights_punctual/lights/{lightIndex}/spot/outerConeAngle"
        },
        {
          "name": "/alphaCutoff",
          "resultVarName": "TestResult_pointer/set and get_/alphaCutoff",
          "resultVarId": 125,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 124,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/alphaCutoff"
        },
        {
          "name": "/emissiveFactor",
          "resultVarName": "TestResult_pointer/set and get_/emissiveFactor",
          "resultVarId": 127,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 126,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveFactor"
        },
        {
          "name": "/normalTexture/scale",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture/scale",
          "resultVarId": 129,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 128,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture/scale"
        },
        {
          "name": "/occlusionTexture/strength",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture/strength",
          "resultVarId": 131,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 130,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture/strength"
        },
        {
          "name": "/normalTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture texture offset",
          "resultVarId": 133,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 132,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture texture offset"
        },
        {
          "name": "/normalTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture texture rotation",
          "resultVarId": 135,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 134,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture texture rotation"
        },
        {
          "name": "/normalTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_/normalTexture texture scale",
          "resultVarId": 137,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 136,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/normalTexture texture scale"
        },
        {
          "name": "/occlusionTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture texture offset",
          "resultVarId": 139,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 138,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture texture offset"
        },
        {
          "name": "/occlusionTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture texture rotation",
          "resultVarId": 141,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 140,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture texture rotation"
        },
        {
          "name": "/occlusionTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_/occlusionTexture texture scale",
          "resultVarId": 143,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 142,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/occlusionTexture texture scale"
        },
        {
          "name": "/emissiveTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_/emissiveTexture texture offset",
          "resultVarId": 145,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 144,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveTexture texture offset"
        },
        {
          "name": "/emissiveTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_/emissiveTexture texture rotation",
          "resultVarId": 147,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 146,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveTexture texture rotation"
        },
        {
          "name": "/emissiveTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_/emissiveTexture texture scale",
          "resultVarId": 149,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 148,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_/emissiveTexture texture scale"
        },
        {
          "name": "pbrMetallicRoughness/baseColorFactor",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorFactor",
          "resultVarId": 151,
          "resultVarType": "float4",
          "expectedResultValue": [
            0.0,
            0.0,
            1.0,
            1.0
          ],
          "successResultVarId": 150,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorFactor"
        },
        {
          "name": "pbrMetallicRoughness/metallicFactor",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicFactor",
          "resultVarId": 153,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 152,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicFactor"
        },
        {
          "name": "pbrMetallicRoughness/roughnessFactor",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/roughnessFactor",
          "resultVarId": 155,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 154,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/roughnessFactor"
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture offset",
          "resultVarId": 157,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 156,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture offset"
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture rotation",
          "resultVarId": 159,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 158,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture rotation"
        },
        {
          "name": "pbrMetallicRoughness/baseColorTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture scale",
          "resultVarId": 161,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 160,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/baseColorTexture texture scale"
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture offset",
          "resultVarId": 163,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 162,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture offset"
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture rotation",
          "resultVarId": 165,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 164,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture rotation"
        },
        {
          "name": "pbrMetallicRoughness/metallicRoughnessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture scale",
          "resultVarId": 167,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 166,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_pbrMetallicRoughness/metallicRoughnessTexture texture scale"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyStrength",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyStrength",
          "resultVarId": 169,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 168,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyStrength"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyRotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyRotation",
          "resultVarId": 171,
          "resultVarType": "float",
          "expectedResultValue": [
            30.0
          ],
          "successResultVarId": 170,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyRotation"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture offset",
          "resultVarId": 173,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 172,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture offset"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture rotation",
          "resultVarId": 175,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 174,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture rotation"
        },
        {
          "name": "KHR_materials_anisotropy/anisotropyTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture scale",
          "resultVarId": 177,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 176,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_anisotropy/anisotropyTexture texture scale"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture offset",
          "resultVarId": 179,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 178,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture offset"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture rotation",
          "resultVarId": 181,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 180,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture rotation"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture scale",
          "resultVarId": 183,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 182,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatTexture texture scale"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset",
          "resultVarId": 185,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 184,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture offset"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation",
          "resultVarId": 187,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 186,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture rotation"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale",
          "resultVarId": 189,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 188,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatRoughnessTexture texture scale"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture offset",
          "resultVarId": 191,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 190,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture offset"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture rotation",
          "resultVarId": 193,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 192,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture rotation"
        },
        {
          "name": "KHR_materials_clearcoat/clearcoatNormalTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture scale",
          "resultVarId": 195,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 194,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_clearcoat/clearcoatNormalTexture texture scale"
        },
        {
          "name": "KHR_materials_dispersion/dispersion",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_dispersion/dispersion",
          "resultVarId": 197,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 196,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_dispersion/dispersion"
        },
        {
          "name": "KHR_materials_emissive_strength/emissiveStrength",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_emissive_strength/emissiveStrength",
          "resultVarId": 199,
          "resultVarType": "float",
          "expectedResultValue": [
            2.0
          ],
          "successResultVarId": 198,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_emissive_strength/emissiveStrength"
        },
        {
          "name": "KHR_materials_ior/ior",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_ior/ior",
          "resultVarId": 201,
          "resultVarType": "float",
          "expectedResultValue": [
            3.0
          ],
          "successResultVarId": 200,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_ior/ior"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceFactor",
          "resultVarId": 203,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 202,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceFactor"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceIor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceIor",
          "resultVarId": 205,
          "resultVarType": "float",
          "expectedResultValue": [
            2.3
          ],
          "successResultVarId": 204,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceIor"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMinimum",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMinimum",
          "resultVarId": 207,
          "resultVarType": "float",
          "expectedResultValue": [
            0.5
          ],
          "successResultVarId": 206,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMinimum"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessMaximum",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMaximum",
          "resultVarId": 209,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 208,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessMaximum"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture offset",
          "resultVarId": 211,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 210,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture offset"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture rotation",
          "resultVarId": 213,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 212,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture rotation"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture scale",
          "resultVarId": 215,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 214,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceTexture texture scale"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture offset",
          "resultVarId": 217,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 216,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture offset"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture rotation",
          "resultVarId": 219,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 218,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture rotation"
        },
        {
          "name": "KHR_materials_iridescence/iridescenceThicknessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture scale",
          "resultVarId": 221,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 220,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_iridescence/iridescenceThicknessTexture texture scale"
        },
        {
          "name": "KHR_materials_sheen/sheenColorFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorFactor",
          "resultVarId": 223,
          "resultVarType": "float3",
          "expectedResultValue": [
            0.0,
            0.0,
            1.0
          ],
          "successResultVarId": 222,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorFactor"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessFactor",
          "resultVarId": 225,
          "resultVarType": "float",
          "expectedResultValue": [
            2.3
          ],
          "successResultVarId": 224,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessFactor"
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture offset",
          "resultVarId": 227,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 226,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture offset"
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture rotation",
          "resultVarId": 229,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 228,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture rotation"
        },
        {
          "name": "KHR_materials_sheen/sheenColorTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture scale",
          "resultVarId": 231,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 230,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenColorTexture texture scale"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture offset",
          "resultVarId": 233,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 232,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture offset"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture rotation",
          "resultVarId": 235,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 234,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture rotation"
        },
        {
          "name": "KHR_materials_sheen/sheenRoughnessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture scale",
          "resultVarId": 237,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 236,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_sheen/sheenRoughnessTexture texture scale"
        },
        {
          "name": "KHR_materials_specular/specularFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularFactor",
          "resultVarId": 239,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 238,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularFactor"
        },
        {
          "name": "KHR_materials_specular/specularColorFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorFactor",
          "resultVarId": 241,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 240,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorFactor"
        },
        {
          "name": "KHR_materials_specular/specularTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularTexture texture offset",
          "resultVarId": 243,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 242,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularTexture texture offset"
        },
        {
          "name": "KHR_materials_specular/specularTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularTexture texture rotation",
          "resultVarId": 245,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 244,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularTexture texture rotation"
        },
        {
          "name": "KHR_materials_specular/specularTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularTexture texture scale",
          "resultVarId": 247,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 246,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularTexture texture scale"
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorTexture texture offset",
          "resultVarId": 249,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 248,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorTexture texture offset"
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorTexture texture rotation",
          "resultVarId": 251,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 250,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorTexture texture rotation"
        },
        {
          "name": "KHR_materials_specular/specularColorTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_specular/specularColorTexture texture scale",
          "resultVarId": 253,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 252,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_specular/specularColorTexture texture scale"
        },
        {
          "name": "KHR_materials_transmission/transmissionFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionFactor",
          "resultVarId": 255,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 254,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionFactor"
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionTexture texture offset",
          "resultVarId": 257,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 256,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionTexture texture offset"
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionTexture texture rotation",
          "resultVarId": 259,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 258,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionTexture texture rotation"
        },
        {
          "name": "KHR_materials_transmission/transmissionTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_transmission/transmissionTexture texture scale",
          "resultVarId": 261,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 260,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_transmission/transmissionTexture texture scale"
        },
        {
          "name": "KHR_materials_volume/thicknessFactor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessFactor",
          "resultVarId": 263,
          "resultVarType": "float",
          "expectedResultValue": [
            1.2
          ],
          "successResultVarId": 262,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessFactor"
        },
        {
          "name": "KHR_materials_volume/attenuationDistance",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/attenuationDistance",
          "resultVarId": 265,
          "resultVarType": "float",
          "expectedResultValue": [
            2.2
          ],
          "successResultVarId": 264,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/attenuationDistance"
        },
        {
          "name": "KHR_materials_volume/attenuationColor",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/attenuationColor",
          "resultVarId": 267,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            0.0,
            0.0
          ],
          "successResultVarId": 266,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/attenuationColor"
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture offset",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessTexture texture offset",
          "resultVarId": 269,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 268,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessTexture texture offset"
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture rotation",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessTexture texture rotation",
          "resultVarId": 271,
          "resultVarType": "float",
          "expectedResultValue": [
            45.0
          ],
          "successResultVarId": 270,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessTexture texture rotation"
        },
        {
          "name": "KHR_materials_volume/thicknessTexture texture scale",
          "resultVarName": "TestResult_pointer/set and get_KHR_materials_volume/thicknessTexture texture scale",
          "resultVarId": 273,
          "resultVarType": "float2",
          "expectedResultValue": [
            2.0,
            3.0
          ],
          "successResultVarId": 272,
          "successResultVarName": "TestResult_HasPassed_pointer/set and get_KHR_materials_volume/thicknessTexture texture scale"
        }
      ]
    },
    {
      "name": "prerequisites/Tests required operations",
      "description": "Testing required operations for proper test execution. This tests should be passed before testing all other tests.",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/add",
        "math/and",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Entry",
          "nodeId": 2401
        },
        {
          "name": "Delayed Check (delayed execution)",
          "nodeId": 2458,
          "delayedExecutionTime": 1.0
        }
      ],
      "subTests": [
        {
          "name": "Flow Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Flow Checks",
          "resultVarId": 274,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 274,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Flow Checks"
        },
        {
          "name": "Value Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Value Checks",
          "resultVarId": 276,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 275,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Value Checks"
        },
        {
          "name": "Value Proximity Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Value Proximity Checks",
          "resultVarId": 278,
          "resultVarType": "float",
          "expectedResultValue": [
            33.2114563
          ],
          "successResultVarId": 277,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Value Proximity Checks"
        },
        {
          "name": "Counter Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Counter Checks",
          "resultVarId": 281,
          "resultVarType": "int",
          "expectedResultValue": [
            2
          ],
          "successResultVarId": 280,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Counter Checks"
        },
        {
          "name": "Multi Flow Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Multi Flow Checks",
          "resultVarId": 284,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 284,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Multi Flow Checks"
        },
        {
          "name": "Delayed Checks",
          "resultVarName": "TestResult_prerequisites/Tests required operations_Delayed Checks",
          "resultVarId": 285,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 285,
          "successResultVarName": "TestResult_HasPassed_prerequisites/Tests required operations_Delayed Checks"
        }
      ]
    },
    {
      "name": "variable/interpolate",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/eq",
        "math/lt",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/interpolate",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Interpolate (delayed execution)",
          "nodeId": 2468,
          "delayedExecutionTime": 4.5
        },
        {
          "name": "[Err] flow (duration -1f",
          "nodeId": 2512
        },
        {
          "name": "[Err] flow (duration infinite",
          "nodeId": 2521
        },
        {
          "name": "[Err] flow (p1 NaN)",
          "nodeId": 2530
        },
        {
          "name": "[Err] flow (p2 NaN)",
          "nodeId": 2539
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_variable/interpolate_Flow [out]",
          "resultVarId": 287,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 287,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Flow [out]"
        },
        {
          "name": "Value at 50%",
          "resultVarName": "TestResult_variable/interpolate_Value at 50%",
          "resultVarId": 290,
          "resultVarType": "float",
          "expectedResultValue": [
            8.75
          ],
          "successResultVarId": 289,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Value at 50%"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_variable/interpolate_Flow [done]",
          "resultVarId": 288,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 288,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Flow [done]"
        },
        {
          "name": "Value at 100%",
          "resultVarName": "TestResult_variable/interpolate_Value at 100%",
          "resultVarId": 292,
          "resultVarType": "float",
          "expectedResultValue": [
            10.0
          ],
          "successResultVarId": 291,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_Value at 100%"
        },
        {
          "name": "[Err] flow (duration -1f",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (duration -1f",
          "resultVarId": 294,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 294,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (duration -1f"
        },
        {
          "name": "[Err] flow (duration infinite",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (duration infinite",
          "resultVarId": 296,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 296,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (duration infinite"
        },
        {
          "name": "[Err] flow (p1 NaN)",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (p1 NaN)",
          "resultVarId": 298,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 298,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (p1 NaN)"
        },
        {
          "name": "[Err] flow (p2 NaN)",
          "resultVarName": "TestResult_variable/interpolate_[Err] flow (p2 NaN)",
          "resultVarId": 300,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 300,
          "successResultVarName": "TestResult_HasPassed_variable/interpolate_[Err] flow (p2 NaN)"
        }
      ]
    },
    {
      "name": "variable/set and get",
      "description": "Set and Get variable test",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Variable bool",
          "nodeId": 2549
        },
        {
          "name": "Set Variable int",
          "nodeId": 2563
        },
        {
          "name": "Set Variable float",
          "nodeId": 2577
        },
        {
          "name": "Set Variable float2",
          "nodeId": 2591
        },
        {
          "name": "Set Variable float3",
          "nodeId": 2605
        },
        {
          "name": "Set Variable float4",
          "nodeId": 2619
        },
        {
          "name": "Get default value from Variable bool",
          "nodeId": 2633
        },
        {
          "name": "Get default value from Variable int",
          "nodeId": 2646
        },
        {
          "name": "Get default value from Variable float",
          "nodeId": 2659
        },
        {
          "name": "Get default value from Variable float2",
          "nodeId": 2672
        },
        {
          "name": "Get default value from Variable float3",
          "nodeId": 2685
        },
        {
          "name": "Get default value from Variable float4",
          "nodeId": 2698
        }
      ],
      "subTests": [
        {
          "name": "static bool",
          "resultVarName": "TestResult_variable/set and get_static bool",
          "resultVarId": 303,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 302,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static bool"
        },
        {
          "name": "static int",
          "resultVarName": "TestResult_variable/set and get_static int",
          "resultVarId": 306,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 305,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static int"
        },
        {
          "name": "static float",
          "resultVarName": "TestResult_variable/set and get_static float",
          "resultVarId": 309,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 308,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float"
        },
        {
          "name": "static float2",
          "resultVarName": "TestResult_variable/set and get_static float2",
          "resultVarId": 312,
          "resultVarType": "float2",
          "expectedResultValue": [
            1.0,
            1.0
          ],
          "successResultVarId": 311,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float2"
        },
        {
          "name": "static float3",
          "resultVarName": "TestResult_variable/set and get_static float3",
          "resultVarId": 315,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 314,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float3"
        },
        {
          "name": "static float4",
          "resultVarName": "TestResult_variable/set and get_static float4",
          "resultVarId": 318,
          "resultVarType": "float4",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 317,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_static float4"
        },
        {
          "name": "default bool",
          "resultVarName": "TestResult_variable/set and get_default bool",
          "resultVarId": 321,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 320,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default bool"
        },
        {
          "name": "default int",
          "resultVarName": "TestResult_variable/set and get_default int",
          "resultVarId": 324,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": 323,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default int"
        },
        {
          "name": "default float",
          "resultVarName": "TestResult_variable/set and get_default float",
          "resultVarId": 327,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 326,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float"
        },
        {
          "name": "default float2",
          "resultVarName": "TestResult_variable/set and get_default float2",
          "resultVarId": 330,
          "resultVarType": "float2",
          "expectedResultValue": [
            1.0,
            1.0
          ],
          "successResultVarId": 329,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float2"
        },
        {
          "name": "default float3",
          "resultVarName": "TestResult_variable/set and get_default float3",
          "resultVarId": 333,
          "resultVarType": "float3",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 332,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float3"
        },
        {
          "name": "default float4",
          "resultVarName": "TestResult_variable/set and get_default float4",
          "resultVarId": 336,
          "resultVarType": "float4",
          "expectedResultValue": [
            1.0,
            1.0,
            1.0,
            1.0
          ],
          "successResultVarId": 335,
          "successResultVarName": "TestResult_HasPassed_variable/set and get_default float4"
        }
      ]
    },
    {
      "name": "variable/setMultiple",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "flow/branch",
        "flow/sequence",
        "math/eq",
        "pointer/set",
        "variable/get",
        "variable/set",
        "variable/setMultiple"
      ],
      "entryPoints": [
        {
          "name": "Set multiple variables",
          "nodeId": 2711
        }
      ],
      "subTests": [
        {
          "name": "[var1]",
          "resultVarName": "TestResult_variable/setMultiple_[var1]",
          "resultVarId": 341,
          "resultVarType": "int",
          "expectedResultValue": [
            11
          ],
          "successResultVarId": 340,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var1]"
        },
        {
          "name": "[var2]",
          "resultVarName": "TestResult_variable/setMultiple_[var2]",
          "resultVarId": 343,
          "resultVarType": "int",
          "expectedResultValue": [
            22
          ],
          "successResultVarId": 342,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var2]"
        },
        {
          "name": "[var3]",
          "resultVarName": "TestResult_variable/setMultiple_[var3]",
          "resultVarId": 345,
          "resultVarType": "int",
          "expectedResultValue": [
            33
          ],
          "successResultVarId": 344,
          "successResultVarName": "TestResult_HasPassed_variable/setMultiple_[var3]"
        }
      ]
    }
  ],
  "usedSchemas": [
    "debug/log",
    "event/onStart",
    "event/onTick",
    "event/receive",
    "event/send",
    "flow/branch",
    "flow/cancelDelay",
    "flow/doN",
    "flow/for",
    "flow/multiGate",
    "flow/sequence",
    "flow/setDelay",
    "flow/switch",
    "flow/throttle",
    "flow/waitAll",
    "flow/while",
    "math/abs",
    "math/add",
    "math/and",
    "math/dot",
    "math/eq",
    "math/gt",
    "math/inverse",
    "math/isNaN",
    "math/length",
    "math/lt",
    "math/matCompose",
    "math/matDecompose",
    "math/matMul",
    "math/normalize",
    "math/select",
    "math/sub",
    "pointer/get",
    "pointer/set",
    "variable/get",
    "variable/interpolate",
    "variable/set",
    "variable/setMultiple"
  ]
}