{
  "glbFileName": "setDelay_and_cancelDelay.glb",
  "name": "flow/setDelay and cancelDelay",
  "tests": [
    {
      "name": "flow/setDelay and cancelDelay",
      "description": "",
      "usedSchemas": [
        "debug/log",
        "event/onStart",
        "event/onTick",
        "flow/branch",
        "flow/cancelDelay",
        "flow/sequence",
        "flow/setDelay",
        "math/abs",
        "math/add",
        "math/eq",
        "math/isNaN",
        "math/lt",
        "math/select",
        "math/sub",
        "pointer/set",
        "variable/get",
        "variable/set"
      ],
      "entryPoints": [
        {
          "name": "Set Delay (delayed execution)",
          "nodeId": 0,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "setDelay [cancel] (delayed execution)",
          "nodeId": 44,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Cancel Delay (delayed execution)",
          "nodeId": 57,
          "delayedExecutionTime": 2.0
        },
        {
          "name": "Error (delayed execution)",
          "nodeId": 77,
          "delayedExecutionTime": 2.0
        }
      ],
      "subTests": [
        {
          "name": "Flow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [out]",
          "resultVarId": 5,
          "resultVarType": "int",
          "expectedResultValue": [
            1
          ],
          "successResultVarId": -1,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [out]"
        },
        {
          "name": "Flow [done]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done]",
          "resultVarId": 1,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 1,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done]"
        },
        {
          "name": "Flow [done] \nin correct delay",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [done] \nin correct delay",
          "resultVarId": 3,
          "resultVarType": "float",
          "expectedResultValue": [
            1.0
          ],
          "successResultVarId": 2,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [done] \nin correct delay"
        },
        {
          "name": "Flow [err]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_Flow [err]",
          "resultVarId": 9,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 9,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_Flow [err]"
        },
        {
          "name": "setDelay [cancel]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_setDelay [cancel]",
          "resultVarId": 6,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 6,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_setDelay [cancel]"
        },
        {
          "name": "cancelDelay triggered",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay triggered",
          "resultVarId": 7,
          "resultVarType": "bool",
          "expectedResultValue": [
            false
          ],
          "successResultVarId": 7,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay triggered"
        },
        {
          "name": "cancelDelay \nFlow [out]",
          "resultVarName": "TestResult_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]",
          "resultVarId": 8,
          "resultVarType": "bool",
          "expectedResultValue": [
            true
          ],
          "successResultVarId": 8,
          "successResultVarName": "TestResult_HasPassed_flow/setDelay and cancelDelay_cancelDelay \nFlow [out]"
        }
      ]
    }
  ],
  "usedSchemas": [
    "debug/log",
    "event/onStart",
    "event/onTick",
    "flow/branch",
    "flow/cancelDelay",
    "flow/sequence",
    "flow/setDelay",
    "math/abs",
    "math/add",
    "math/eq",
    "math/isNaN",
    "math/lt",
    "math/select",
    "math/sub",
    "pointer/set",
    "variable/get",
    "variable/set"
  ]
}